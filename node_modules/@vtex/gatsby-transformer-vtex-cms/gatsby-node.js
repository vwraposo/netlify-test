"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onCreateNode = void 0;
const cms_1 = require("./cms");
const compiler_1 = require("./compiler");
const TYPE = 'CMSPage';
exports.onCreateNode = ({ node, actions: { createNode, createParentChildLink }, createNodeId, loadNodeContent, createContentDigest, }) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    // We should only check JSON nodes
    if (node.internal.mediaType !== 'application/json') {
        return;
    }
    // We should only check for CMS typed JSON nodes
    const contentStr = yield loadNodeContent(node);
    const content = JSON.parse(contentStr);
    if (!cms_1.isContent(content)) {
        return;
    }
    const dom = new compiler_1.ContentDOM(content);
    const obj = {
        src: dom.renderToString(),
        slug: (_a = cms_1.getMeta(content.extraBlocks)) === null || _a === void 0 ? void 0 : _a.slug,
        name: node.name,
    };
    const compiled = Object.assign(Object.assign({}, obj), { id: createNodeId(`${TYPE}-${node.id}`), children: [], parent: node.id, internal: {
            contentDigest: createContentDigest(obj),
            type: TYPE,
            mediaType: 'text/plain',
        } });
    createNode(compiled);
    createParentChildLink({ parent: node, child: compiled });
});
