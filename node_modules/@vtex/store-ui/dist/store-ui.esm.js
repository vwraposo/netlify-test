import { Flex, jsx, Image as Image$1, Heading, Text, Button, Box, Label, Checkbox, Select, Input, AspectImage, AspectRatio } from 'theme-ui';
export * from 'theme-ui';
import Drawer from '@vtex-components/drawer';
export { default as Drawer } from '@vtex-components/drawer';
import merge from 'deepmerge';
import base from '@theme-ui/preset-base';
import React, { useState, useEffect, useCallback, useMemo, useRef, Fragment } from 'react';
import Link from 'gatsby-link';
import { useLocalizedPath } from '@vtex/gatsby-plugin-i18n';
import BaseAccordion from '@vtex-components/accordion';
import { useResponsiveValue } from '@theme-ui/match-media';
export * from 'reakit/Popover';
import { jsx as jsx$1, css, keyframes } from '@emotion/core';

var overwriteMerge = function overwriteMerge(_, sourceArray, __) {
  return sourceArray;
};

var createTheme = function createTheme() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return merge.all(args, {
    arrayMerge: overwriteMerge
  });
};

var customBase = {
  useCustomProperties: false,
  initialColorModeName: false,
  initialColorMode: false,
  useLocalStorage: false,
  colors: {
    text: '#3f3f40',
    textMuted: '#979899',
    textBold: '#03003d',
    background: '#fff',
    primary: '#0f3e99',
    muted: '#f0f0f0',
    gray: '#e3e4e6'
  },
  sizes: {
    container: '96rem'
  },
  layout: {
    container: {
      px: [1, 2, 3]
    }
  }
};
var baseTheme = /*#__PURE__*/createTheme(base, customBase);

var throttle = function throttle(cb, wait) {
  if (wait === void 0) {
    wait = 166;
  }

  var timeout = null;

  var throttled = function throttled() {
    if (timeout !== null) {
      return;
    }

    var later = function later() {
      timeout = null;
    };

    timeout = setTimeout(later, wait);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return cb.apply(cb, args);
  };

  return throttled;
};

// Code Extracted from:
// https://github.com/mui-org/material-ui/blob/2294351567479b30b481d692c29181ec0f22684f/packages/material-ui/src/utils/debounce.js#L1
// Corresponds to 10 frames at 60 Hz.
// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
var debounce = function debounce(cb, wait) {
  if (wait === void 0) {
    wait = 166;
  }

  var timeout;

  var debounced = function debounced() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var later = function later() {
      return cb.apply(cb, args);
    };

    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };

  debounced.clear = function () {
    return clearTimeout(timeout);
  };

  return debounced;
};

var Header = function Header(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'header' : _ref$variant,
      children = _ref.children;
  return React.createElement(Flex, {
    variant: variant,
    as: "header"
  }, children);
};

var menuTheme = {
  menu: {
    marginLeft: [0, 0, 4],
    my: [3, 0, 0],
    a: {
      textDecoration: 'none',
      color: 'inherit',
      mx: [2, 3, 3],
      '&.active': {
        color: 'primary'
      },
      '&:hover': {
        color: 'primary'
      }
    }
  }
};

var notificationbarTheme = {
  notificationbar: {
    display: ['none', 'none', 'flex'],
    alignItems: 'center',
    textDecoration: 'underline',
    justifyContent: 'center',
    bg: '#e0efe0',
    color: 'textBold',
    minHeight: '48px',
    fontWeight: 'bold',
    fontSize: 0
  }
};

var overmenuTheme = {
  overmenu: {
    display: ['none', 'none', 'flex'],
    alignItems: 'center',
    justifyContent: 'space-between',
    textDecoration: 'none',
    bg: '#02003d',
    minHeight: '48px',
    color: 'muted',
    fontSize: 1,
    px: [1, 2, 3],
    a: {
      mx: '24px',
      alignItems: 'center',
      justifyContent: 'center',
      textDecoration: 'none',
      color: 'inherit',
      '&.first': {
        marginLeft: 0
      },
      '&.last': {
        marginRight: 0
      },
      '&.active': {
        color: 'textMuted'
      },
      '&:hover': {
        color: 'textMuted'
      }
    }
  }
};

var searchTheme = {
  search: {
    maxWidth: 250,
    bg: 'background',
    borderWidth: '2px',
    borderStyle: 'solid',
    borderColor: 'gray',
    px: 3
  }
};

var headerTheme = {
  header: /*#__PURE__*/createTheme({
    bg: 'muted',
    px: [1, 2, 3],
    py: 3,
    justifyContent: ['center', 'space-between', 'space-between'],
    alignItems: 'center',
    flexWrap: 'wrap'
  }, overmenuTheme, menuTheme, notificationbarTheme, searchTheme, {
    left: {
      alignItems: 'center',
      justifyContent: 'center',
      flexWrap: 'wrap'
    },
    right: {
      alignItems: 'center'
    }
  })
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

var LocalizedLink = function LocalizedLink(props) {
  var children = props.children,
      linkProps = _objectWithoutPropertiesLoose(props, ["children"]);

  var href = useLocalizedPath(props.to);
  return (// @ts-ignore
    React.createElement(Link, Object.assign({}, linkProps, {
      to: href
    }), children)
  );
};

var Logo = function Logo(_ref) {
  var variant = _ref.variant,
      _ref$href = _ref.href,
      href = _ref$href === void 0 ? '/' : _ref$href,
      src = _ref.src,
      _ref$title = _ref.title,
      title = _ref$title === void 0 ? 'Store Theme Logo' : _ref$title,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? '12px' : _ref$height,
      _ref$viewBox = _ref.viewBox,
      viewBox = _ref$viewBox === void 0 ? '0 0 660 44' : _ref$viewBox;
  var props = {
    as: LocalizedLink,
    to: href,
    variant: variant
  };
  return React.createElement(Flex, Object.assign({}, props), React.createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    height: height,
    viewBox: viewBox,
    xmlSpace: "preserve"
  }, React.createElement("title", null, title), React.createElement("image", {
    id: "image0",
    x: "0",
    y: "0",
    href: src
  })));
};

var ProgressiveImage = function ProgressiveImage(_ref) {
  var targetProps = _ref.targetProps,
      placeholderProps = _ref.placeholderProps,
      _ref$as = _ref.as,
      Component = _ref$as === void 0 ? 'img' : _ref$as,
      commonProps = _objectWithoutPropertiesLoose(_ref, ["targetProps", "placeholderProps", "as"]);

  var _useState = useState(placeholderProps),
      current = _useState[0],
      setCurrent = _useState[1];

  useEffect(function () {
    return setCurrent(placeholderProps);
  }, [placeholderProps]);
  useEffect(function () {
    // Placeholder equals target. Dont bother creating an image
    if (current.sizes === targetProps.sizes && current.srcSet === targetProps.srcSet && current.src === targetProps.src) {
      return;
    }

    var imageToLoad = new Image();

    imageToLoad.onload = function () {
      return setCurrent(targetProps);
    }; // This order is important. Do NOT change it. Safari requires sizes to
    // be set before than srcSet


    var keys = ['sizes', 'srcSet', 'src'];

    for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
      var key = _keys[_i];

      if (key in targetProps) {
        imageToLoad.setAttribute(key.toLowerCase(), targetProps[key]);
      }
    }
  }, [current, targetProps]);
  return React.createElement(Component, Object.assign({}, commonProps, current));
};

var ResponsivePicture = function ResponsivePicture(_ref) {
  var sources = _ref.sources,
      variant = _ref.variant,
      imgProps = _objectWithoutPropertiesLoose(_ref, ["sources", "variant"]);

  return jsx("picture", {
    sx: {
      variant: variant + ".responsivePicture.picture"
    }
  }, sources.map(function (source) {
    return jsx("source", Object.assign({
      key: source.srcSet
    }, source));
  }), jsx("img", Object.assign({
    sx: {
      variant: variant + ".responsivePicture.img"
    }
  }, imgProps)));
};

var responsivePicture = {
  picture: {
    display: 'block',
    overflow: 'hidden'
  },
  img: {
    minWidth: '100%',
    width: 'auto',
    height: 'auto',
    marginLeft: '50%',
    transform: 'translateX(-50%)',
    zIndex: -2
  }
};

var InfoCard = function InfoCard(_ref) {
  var children = _ref.children,
      variant = _ref.variant;
  var variantStr = "card" + (variant ? "." + variant : '');
  return React.createElement(Flex, {
    variant: variantStr
  }, children);
};

var InfoCardImage = function InfoCardImage(_ref) {
  var alt = _ref.alt,
      src = _ref.src,
      href = _ref.href,
      height = _ref.height,
      width = _ref.width;
  var linkProps = {
    as: LocalizedLink,
    to: href,
    variant: 'card.image.link'
  };
  return React.createElement(Flex, {
    variant: "card.image"
  }, React.createElement(Flex, Object.assign({}, linkProps), React.createElement(Image$1, {
    variant: "card.image.content",
    height: height,
    width: width,
    alt: alt,
    src: src,
    loading: "lazy"
  })));
};

var InfoCardInfo = function InfoCardInfo(_ref) {
  var title = _ref.title,
      description = _ref.description,
      children = _ref.children;
  return React.createElement(Flex, {
    variant: "card.info"
  }, title && React.createElement(Heading, {
    variant: "card.info.title"
  }, title), description && React.createElement(Text, {
    variant: "card.info.description"
  }, description), children && React.createElement(Flex, {
    variant: "card.info.children"
  }, children));
};

var InfoCardInfoAction = function InfoCardInfoAction(_ref) {
  var href = _ref.href,
      label = _ref.label;
  var props = {
    as: LocalizedLink,
    to: href,
    variant: 'card.info.action'
  };
  return React.createElement(Button, Object.assign({}, props), label);
};

var CardTheme = {
  card: {
    margin: '0 auto',
    width: '100%',
    maxWidth: ['100%', '100%', '96rem'],
    maxHeight: '540px',
    bg: '#e0efe0',
    flexWrap: 'wrap',
    image: {
      width: ['100%', '70%'],
      display: 'inline',
      maxHeight: '540px',
      objectFit: 'cover',
      link: {
        flex: 1
      },
      content: {
        width: '100%'
      }
    },
    info: {
      padding: [3, 0, 0],
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
      width: ['100%', '30%'],
      action: {
        marginTop: 3
      }
    }
  }
};

var MinicartBadge = function MinicartBadge(_ref) {
  var variant = _ref.variant,
      value = _ref.value;
  var customVariant = variant + ".badge";
  return React.createElement(Box, {
    variant: customVariant,
    as: "span"
  }, value);
};

var MinicartButton = function MinicartButton(_ref) {
  var children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["children"]);

  return jsx(Button, Object.assign({
    "aria-label": "Open Cart"
  }, props), children);
};

var MinicartContent = function MinicartContent(_ref) {
  var data = _ref.data,
      variant = _ref.variant,
      currency = _ref.currency,
      imageElement = _ref.imageElement;
  var customVariant = variant + ".content";

  var imageProps = function imageProps(item) {
    return {
      as: imageElement,
      width: 200,
      height: 200,
      src: item.image.src,
      alt: item.image.alt,
      loading: 'lazy'
    };
  };

  return React.createElement(Flex, {
    variant: customVariant
  }, data.map(function (item) {
    return React.createElement(Flex, {
      key: item.id,
      variant: customVariant + ".product"
    }, React.createElement(Box, {
      variant: customVariant + ".product.image"
    }, React.createElement(Box, Object.assign({}, imageProps(item)))), React.createElement(Flex, {
      variant: customVariant + ".product.name"
    }, React.createElement(Text, {
      variant: customVariant + ".product.name.text"
    }, item.name), React.createElement(Text, {
      variant: customVariant + ".product.name.value"
    }, currency + " " + item.price)));
  }));
};

var MinicartDrawer = Drawer;
var MinicartDrawerPrice = function MinicartDrawerPrice(_ref) {
  var currency = _ref.currency,
      text = _ref.text,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? 0 : _ref$value,
      variant = _ref.variant;
  return React.createElement(Flex, {
    variant: variant
  }, React.createElement(Text, {
    variant: variant + ".text"
  }, text), React.createElement(Text, {
    variant: variant + ".value"
  }, currency + " " + value));
};

var MinicartButtonSvg = function MinicartButtonSvg(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#979899' : _ref$color,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? 16 : _ref$height,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 16 : _ref$width,
      _ref$viewBox = _ref.viewBox,
      viewBox = _ref$viewBox === void 0 ? '0 0 16 16' : _ref$viewBox;
  return React.createElement("svg", {
    fill: "none",
    width: width,
    height: height,
    viewBox: viewBox
  }, React.createElement("use", {
    href: "#hpa-cart"
  }, React.createElement("g", {
    id: "hpa-cart"
  }, React.createElement("path", {
    d: "M15.0503 3.0002H4.92647C4.81221 3.00072 4.7012 2.96234 4.6118 2.89142C4.52239 2.8205 4.45996 2.72129 4.43483 2.6102L4.01342 0.800203C3.96651 0.570928 3.84041 0.365306 3.65708 0.219131C3.47375 0.0729566 3.24479 -0.00451449 3.01006 0.000203439H0.501677C0.368624 0.000203439 0.241021 0.0528819 0.146938 0.14665C0.0528551 0.240418 0 0.367595 0 0.500203L0 1.5002C0 1.63281 0.0528551 1.75999 0.146938 1.85376C0.241021 1.94753 0.368624 2.0002 0.501677 2.0002H1.80604C1.92077 1.9978 2.03274 2.03548 2.12253 2.10671C2.21232 2.17794 2.27429 2.27823 2.29768 2.3902L4.01342 10.2002C4.06032 10.4295 4.18642 10.6351 4.36975 10.7813C4.55308 10.9274 4.78204 11.0049 5.01677 11.0002H13.0436C13.2478 10.9891 13.4436 10.9161 13.605 10.791C13.7664 10.6659 13.8856 10.4947 13.9466 10.3002L15.9533 4.3002C15.9995 4.15468 16.0116 4.00057 15.9888 3.84965C15.9659 3.69874 15.9088 3.55504 15.8216 3.42956C15.7344 3.30408 15.6196 3.20015 15.4859 3.12573C15.3522 3.0513 15.2032 3.00837 15.0503 3.0002Z",
    fill: color
  }), React.createElement("path", {
    d: "M5.02682 16.0002C6.13509 16.0002 7.03353 15.1048 7.03353 14.0002C7.03353 12.8956 6.13509 12.0002 5.02682 12.0002C3.91855 12.0002 3.02011 12.8956 3.02011 14.0002C3.02011 15.1048 3.91855 16.0002 5.02682 16.0002Z",
    fill: color
  }), React.createElement("path", {
    d: "M13.0737 16.0002C14.182 16.0002 15.0804 15.1048 15.0804 14.0002C15.0804 12.8956 14.182 12.0002 13.0737 12.0002C11.9655 12.0002 11.067 12.8956 11.067 14.0002C11.067 15.1048 11.9655 16.0002 13.0737 16.0002Z",
    fill: color
  }))));
};

var minicartTheme = {
  minicart: {
    bg: '#f0f0f0',
    position: 'relative',
    cursor: 'pointer',
    badge: {
      bg: '#f71963',
      borderRadius: '100%',
      height: 16,
      position: 'absolute',
      width: 16,
      top: 0,
      right: 0,
      fontSize: 10
    },
    drawer: {
      container: {
        zIndex: 99999,
        display: 'flex',
        bg: 'background',
        height: '100%',
        flexDirection: 'column',
        overflow: 'hidden'
      },
      mask: {
        bg: 'primary',
        opacity: 0.5,
        zIndex: 9999
      },
      header: {
        p: 3,
        title: {
          pt: 3
        }
      },
      content: {
        flexDirection: 'column',
        flex: 1,
        overflow: 'auto',
        px: 3,
        product: {
          py: 3,
          borderBottomWidth: 1,
          borderBottomStyle: 'solid',
          borderBottomColor: 'muted',
          '&:last-child': {
            borderWidth: 0
          },
          image: {
            height: 96,
            width: 96
          },
          name: {
            flexDirection: 'column',
            ml: 3,
            value: {
              mt: 3
            }
          }
        }
      },
      footer: {
        p: 3,
        flexDirection: 'column',
        boxShadow: '0 0 12px rgba(0,0,0,.15)',
        subtotal: {
          justifyContent: 'space-between'
        },
        total: {
          justifyContent: 'space-between',
          text: {
            fontSize: 4
          },
          value: {
            fontSize: 4
          }
        },
        message: {
          my: 3
        }
      }
    }
  }
};

var Banner = function Banner(_ref) {
  var src = _ref.src,
      href = _ref.href,
      alt = _ref.alt,
      width = _ref.width,
      height = _ref.height,
      _ref$loading = _ref.loading,
      loading = _ref$loading === void 0 ? 'lazy' : _ref$loading;
  return jsx(LocalizedLink, {
    to: href
  }, jsx(Image$1, {
    src: src,
    alt: alt,
    width: width,
    height: height,
    loading: loading
  }));
};

var RichMarkdown = function RichMarkdown(_ref) {
  var text = _ref.text,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'default' : _ref$variant;
  return React.createElement(Box, {
    variant: "rich-text." + variant,
    dangerouslySetInnerHTML: {
      __html: text
    }
  });
};

var ArrowUp = /*#__PURE__*/React.createElement("path", {
  d: "M7.26254 2.80524C7.65892 2.37243 8.34108 2.37243 8.73746 2.80525L16 10.7353L13.9259 13L8 6.52941L2.07407 13L0 10.7353L7.26254 2.80524Z",
  fill: "currentColor"
});
var ArrowDown = /*#__PURE__*/React.createElement("path", {
  d: "M8.73746 13.1948C8.34108 13.6276 7.65892 13.6276 7.26254 13.1948L0 5.26471L2.07407 3L8 9.47059L13.9259 3L16 5.26471L8.73746 13.1948Z",
  fill: "currentColor"
});
var SearchFilterAccordionCollaipsibleIcon = function SearchFilterAccordionCollaipsibleIcon(_ref) {
  var isActive = _ref.isActive,
      variant = _ref.variant;
  return React.createElement(Box, {
    variant: variant + ".icon"
  }, React.createElement("svg", {
    width: "100%",
    height: "100%",
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink"
  }, React.createElement("g", null, isActive ? ArrowUp : ArrowDown)));
};

var SearchFilterAccordion = function SearchFilterAccordion(_ref) {
  var filters = _ref.filters,
      v = _ref.variant,
      isActive = _ref.isActive,
      renderItem = _ref.renderItem,
      renderIcon = _ref.renderIcon;
  var variant = "searchFilter." + v;
  var defaultRenderIcon = useCallback(function (active) {
    return React.createElement(SearchFilterAccordionCollaipsibleIcon, {
      isActive: active,
      variant: variant + ".accordion.collapsible.header"
    });
  }, [variant]); // Making this if in here helps performance because we have branchless maps later on

  var isActiveFn = typeof isActive === 'function' ? isActive : function () {
    return isActive;
  };
  return React.createElement(BaseAccordion, {
    variant: variant,
    mode: "multiOpen",
    renderIcon: renderIcon !== null && renderIcon !== void 0 ? renderIcon : defaultRenderIcon
  }, filters.map(function (filter, index) {
    return React.createElement(BaseAccordion.Section, {
      key: filter.name + ":" + index,
      header: filter.name,
      isActive: isActiveFn(index)
    }, React.createElement(Box, {
      as: "ul",
      variant: variant + ".accordion.collapsible.ul"
    }, filter.values.map(function (item, idx) {
      return React.createElement("li", {
        key: filter.name + ":" + idx
      }, renderItem(item, variant + ".accordion.collapsible.li"));
    })));
  }));
};

var SearchFilterAccordionItemCheckbox = function SearchFilterAccordionItemCheckbox(_ref) {
  var _ref$item = _ref.item,
      name = _ref$item.name,
      quantity = _ref$item.quantity,
      selected = _ref$item.selected,
      variant = _ref.variant,
      _onClick = _ref.onClick,
      item = _ref.item;
  return React.createElement(Label, {
    onClick: function onClick(e) {
      e.preventDefault();

      _onClick(item);
    }
  }, React.createElement(Checkbox, {
    variant: variant + ".checkbox",
    checked: selected,
    readOnly: true
  }), React.createElement(Box, {
    variant: variant + ".value"
  }, name), React.createElement(Box, {
    variant: variant + ".quantity"
  }, quantity));
};

var accordionTheme = {
  accordion: {
    collapsible: {
      paddingBottom: '16px',
      borderBottom: '1px solid #e3e4e6',
      header: {
        fontSize: '1rem',
        height: '50px',
        width: '100%',
        textAlign: 'left',
        justifyContent: 'space-between',
        alignItems: 'center',
        alignContent: 'center',
        icon: {
          width: '50px',
          height: '50px',
          color: 'muted',
          alignItems: 'center',
          g: {
            transform: 'translate(40%, 40%)'
          }
        }
      },
      ul: {
        maxHeight: '210px',
        overflowY: 'scroll',
        listStyleType: 'none',
        margin: 0,
        px: 0
      },
      a: {
        textDecoration: 'none',
        color: 'inherit'
      },
      li: {
        display: 'flex',
        alignContent: 'center',
        alignItems: 'center',
        minHeight: '24px',
        checkbox: {
          cursor: 'pointer',
          color: 'muted',
          my: 'auto'
        },
        value: {
          cursor: 'pointer',
          fontSize: '14px',
          my: 'auto',
          '&:hover': {
            color: 'textMuted'
          }
        },
        quantity: {
          color: 'textMuted',
          ml: '12px',
          marginTop: '1px',
          fontSize: '1rem'
        }
      }
    }
  }
};

var searchFilterTheme = /*#__PURE__*/createTheme(accordionTheme);

var SearchControls = function SearchControls(_ref) {
  var children = _ref.children,
      v = _ref.variant;
  var variant = "searchControls" + (v ? "." + v : '');
  return React.createElement(Box, {
    variant: variant
  }, children);
};

var SearchControlsFiltersButton = function SearchControlsFiltersButton(_ref) {
  var label = _ref.label,
      v = _ref.variant,
      props = _objectWithoutPropertiesLoose(_ref, ["label", "variant"]);

  var variant = "searchControls" + (v ? "." + v : '') + ".filtersButton";
  return React.createElement(Button, Object.assign({
    variant: variant
  }, props), label, React.createElement("svg", {
    fill: "none",
    width: "16",
    height: "16",
    viewBox: "0 0 17 17",
    className: " vtex-search-result-3-x-filterIcon",
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink"
  }, React.createElement("use", {
    href: "#mpa-filter-settings",
    xlinkHref: "#mpa-filter-settings"
  }, React.createElement("g", {
    id: "mpa-filter-settings"
  }, React.createElement("path", {
    d: "M4 5V1",
    strokeMiterlimit: "10",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    stroke: "currentColor"
  }), React.createElement("path", {
    d: "M4 16V14",
    strokeMiterlimit: "10",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    stroke: "currentColor"
  }), React.createElement("path", {
    d: "M13 12V16",
    strokeMiterlimit: "10",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    stroke: "currentColor"
  }), React.createElement("path", {
    d: "M13 1V3",
    strokeMiterlimit: "10",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    stroke: "currentColor"
  }), React.createElement("path", {
    d: "M4 14C5.65685 14 7 12.6569 7 11C7 9.34315 5.65685 8 4 8C2.34315 8 1 9.34315 1 11C1 12.6569 2.34315 14 4 14Z",
    strokeMiterlimit: "10",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    stroke: "currentColor"
  }), React.createElement("path", {
    d: "M13 9C14.6569 9 16 7.65685 16 6C16 4.34315 14.6569 3 13 3C11.3431 3 10 4.34315 10 6C10 7.65685 11.3431 9 13 9Z",
    strokeMiterlimit: "10",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    stroke: "currentColor"
  })))));
};

var SearchControlsTotalCount = function SearchControlsTotalCount(_ref) {
  var totalCount = _ref.totalCount,
      label = _ref.label,
      v = _ref.variant;
  var variant = "searchControls" + (v ? "." + v : '') + ".totalCount";
  return React.createElement(Box, {
    variant: variant
  }, React.createElement("span", null, totalCount), label);
};

var options = [['OrderByScoreDESC', 'searchControls.select.scoreDesc'], ['OrderByPriceDESC', 'searchControls.select.priceDesc'], ['OrderByPriceASC', 'searchControls.select.priceAsc'], ['OrderByTopSaleDESC', 'searchControls.select.topSaleDesc'], ['OrderByReviewRateDESC', 'searchControls.select.reviewRateDesc'], ['OrderByNameDESC', 'searchControls.select.nameDesc'], ['OrderByNameASC', 'searchControls.select.nameAsc'], ['OrderByReleaseDateDESC', 'searchControls.select.releaseDateDesc'], ['OrderByBestDiscountDESC', 'searchControls.select.bestDiscountDesc']];
var SearchControlsSelect = function SearchControlsSelect(_ref) {
  var _onChange = _ref.onChange,
      _ref$ariaLabel = _ref['aria-label'],
      ariaLabel = _ref$ariaLabel === void 0 ? 'Refine Search' : _ref$ariaLabel,
      formatLabel = _ref.formatLabel,
      v = _ref.variant,
      props = _objectWithoutPropertiesLoose(_ref, ["onChange", "aria-label", "formatLabel", "variant"]);

  var variant = "searchControls" + (v ? "." + v : '') + ".select";
  return React.createElement(Select, Object.assign({
    "aria-label": ariaLabel,
    onChange: function onChange(event) {
      return _onChange(event.target.selectedOptions[0].value);
    },
    variant: variant
  }, props), options.map(function (_ref2) {
    var value = _ref2[0],
        label = _ref2[1];
    var l = formatLabel(label);
    return React.createElement("option", {
      label: l,
      key: value,
      value: value,
      "aria-label": l
    });
  }));
};

var searchControlsTheme = {
  searchControls: {
    display: 'flex',
    flexDirection: 'row-reverse',
    flexWrap: 'wrap',
    justifyContent: ['space-around', 'space-between'],
    alignItems: 'center',
    my: ['10px', 4],
    totalCount: {
      mt: ['10px', 0],
      pt: ['10px', 0],
      width: ['100%', 'auto'],
      textAlign: 'center',
      borderTop: ['1px solid #e2e2e2', 'none'],
      span: {
        fontWeight: 'bold'
      }
    },
    select: {
      px: '8px',
      py: ['6px', '2px'],
      color: 'text',
      minWidth: '170px',
      textTransform: 'capitalize',
      borderColor: 'transparent'
    },
    filtersButton: {
      display: ['block', 'none'],
      backgroundColor: 'white',
      color: 'text'
    }
  }
};

var homeSvgProps = {
  width: '24',
  height: '24',
  viewBox: '0 0 24 24'
};
var caretSvgProps = {
  width: '24',
  height: '24',
  viewBox: '0 0 180 180'
};
var Breadcrumb = function Breadcrumb(_ref) {
  var breadcrumb = _ref.breadcrumb,
      type = _ref.type;
  return React.createElement(Flex, {
    "data-testid": "breadcrumb",
    variant: "breadcrumb.container"
  }, React.createElement(Link, {
    to: "/",
    "aria-label": "Home"
  }, React.createElement(Flex, Object.assign({
    as: "svg",
    variant: "breadcrumb.homeIcon"
  }, homeSvgProps), React.createElement("path", {
    d: "M21 13v10h-6v-6h-6v6h-6v-10h-3l12-12 12 12h-3zm-1-5.907v-5.093h-3v2.093l3 3z"
  }))), breadcrumb.map(function (_ref2, i) {
    var name = _ref2.name,
        href = _ref2.href;
    return React.createElement(Flex, {
      key: "navigation-item-" + i,
      variant: "breadcrumb.pair"
    }, React.createElement(Flex, Object.assign({
      as: "svg",
      variant: "breadcrumb.caretIcon"
    }, caretSvgProps), React.createElement("path", {
      d: "M51.707,185.343c-2.741,0-5.493-1.044-7.593-3.149c-4.194-4.194-4.194-10.981,0-15.175\n\t\t\tl74.352-74.347L44.114,18.32c-4.194-4.194-4.194-10.987,0-15.175c4.194-4.194,10.987-4.194,15.18,0l81.934,81.934\n\t\t\tc4.194,4.194,4.194,10.987,0,15.175l-81.934,81.939C57.201,184.293,54.454,185.343,51.707,185.343z"
    })), React.createElement(Link, {
      to: href,
      style: {
        textDecoration: 'none '
      }
    }, React.createElement(Text, {
      variant: "breadcrumb." + (i === breadcrumb.length - 1 && type === 'SEARCH' ? 'last' : 'middle')
    }, name)));
  }));
};

var breadcrumbTheme = {};

/** @jsx jsx */

var SliderPaginationDots = function SliderPaginationDots(_ref) {
  var variant = _ref.variant,
      onSelect = _ref.onSelect,
      totalPages = _ref.totalPages,
      selectedPage = _ref.selectedPage;
  var indexes = useMemo(function () {
    return Array.from(Array(totalPages).keys());
  }, [totalPages]);
  return jsx(Box, {
    variant: variant + ".paginationDots.container",
    role: "group",
    "aria-label": "Slider pagination dots"
  }, indexes.map(function (index) {
    var isActive = index === selectedPage;
    return jsx(Box, {
      variant: variant + ".paginationDots." + (isActive ? 'activeDot' : 'dot'),
      key: index,
      tabIndex: 0,
      onKeyDown: function onKeyDown() {
        return onSelect(index);
      },
      onClick: function onClick() {
        return onSelect(index);
      },
      role: "button",
      "aria-label": "Dot " + (index + 1) + " of " + totalPages,
      "data-testid": "paginationDot"
    });
  }));
};

var svgProps = {
  fill: 'none',
  width: '25',
  height: '25',
  viewBox: '0 0 16 16',
  xmlns: 'http://www.w3.org/2000/svg',
  xmlnsXlink: 'http://www.w3.org/1999/xlink'
};

var SliderArrowLeft = function SliderArrowLeft(props) {
  return React.createElement(Box, Object.assign({}, props, {
    as: "button",
    variant: props.variant + ".arrow.left.button"
  }), React.createElement(Box, Object.assign({
    as: "svg"
  }, svgProps, {
    variant: props.variant + ".arrow.left.svg"
  }), React.createElement("use", {
    href: "#nav-thin-caret--left",
    xlinkHref: "#nav-thin-caret--left"
  }, React.createElement("g", {
    id: "nav-thin-caret--left"
  }, React.createElement("path", {
    d: "M11 1L4 8L11 15",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeMiterlimit: "10",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  })))));
};

var svgProps$1 = {
  fill: 'none',
  width: '25',
  height: '25',
  viewBox: '0 0 16 16',
  xmlns: 'http://www.w3.org/2000/svg',
  xmlnsXlink: 'http://www.w3.org/1999/xlink'
};

var SliderArrowRight = function SliderArrowRight(props) {
  return React.createElement(Box, Object.assign({}, props, {
    as: "button",
    variant: props.variant + ".arrow.right.button"
  }), React.createElement(Box, Object.assign({
    as: "svg"
  }, svgProps$1, {
    variant: props.variant + ".arrow.right.svg"
  }), React.createElement("use", {
    href: "#nav-thin-caret--right",
    xlinkHref: "#nav-thin-caret--right"
  }, React.createElement("g", {
    id: "nav-thin-caret--right"
  }, React.createElement("path", {
    d: "M5 15L12 8L5 1",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeMiterlimit: "10",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  })))));
};

var useInterval = function useInterval(callback, delay) {
  var savedCallback = useRef();
  useEffect(function () {
    savedCallback.current = callback;
  }, [callback]);
  useEffect(function () {
    var handler = function handler() {
      var _savedCallback$curren;

      return savedCallback === null || savedCallback === void 0 ? void 0 : (_savedCallback$curren = savedCallback.current) === null || _savedCallback$curren === void 0 ? void 0 : _savedCallback$curren.call(savedCallback);
    };

    if (delay !== null) {
      var id = setInterval(handler, delay);
      return function () {
        return clearInterval(id);
      };
    }

    return function () {};
  }, [delay]);
};

// so the naive "previous()" implementation will always return a value
// within the array ranges

var next = function next(index, total) {
  return (index + 1) % total;
};

var previous = function previous(index, total) {
  return (total - (total - index + 1) % total) % total;
};

var useSlider = function useSlider(_ref) {
  var allItems = _ref.allItems,
      _ref$pageSize = _ref.pageSize,
      pageSize = _ref$pageSize === void 0 ? 1 : _ref$pageSize,
      _ref$autoplay = _ref.autoplay,
      autoplay = _ref$autoplay === void 0 ? false : _ref$autoplay,
      _ref$autoplayTimeout = _ref.autoplayTimeout,
      autoplayTimeout = _ref$autoplayTimeout === void 0 ? 1e6 : _ref$autoplayTimeout;
  var totalPages = Math.ceil(allItems.length / pageSize); // Page State pagination

  var _useState = useState(0),
      page = _useState[0],
      setPage = _useState[1]; // Somehow, the items changed but state kept the same,
  // So go back to first page and apply Effect


  var currentPage = page < allItems.length ? page : 0;
  useEffect(function () {
    return setPage(0);
  }, [allItems.length]); // Items on current page

  var items = useMemo(function () {
    return allItems.slice(currentPage * pageSize, (currentPage + 1) * pageSize);
  }, [allItems, currentPage, pageSize]);
  var setNextPage = useCallback(function () {
    return setPage(function (p) {
      return next(p, totalPages);
    });
  }, [totalPages]);
  var setPreviousPage = useCallback(function () {
    return setPage(function (p) {
      return previous(p, totalPages);
    });
  }, [totalPages]);
  useInterval(function () {
    if (!autoplay) {
      return;
    }

    setNextPage();
  }, autoplayTimeout);
  return {
    totalPages: totalPages,
    items: items,
    page: currentPage,
    setPage: setPage,
    setNextPage: setNextPage,
    setPreviousPage: setPreviousPage
  };
};

var useResponsiveSlider = function useResponsiveSlider(_ref) {
  var pageSizes = _ref.pageSizes,
      defaultIndex = _ref.defaultIndex,
      rest = _objectWithoutPropertiesLoose(_ref, ["pageSizes", "defaultIndex"]);

  var pageSize = useResponsiveValue(pageSizes, {
    defaultIndex: defaultIndex
  });
  var slider = useSlider(_extends({}, rest, {
    pageSize: pageSize
  }));
  return _extends({}, slider, {
    pageSize: pageSize
  });
};

var Center = function Center(_ref) {
  var children = _ref.children,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? '100%' : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? '100%' : _ref$height;
  return jsx(Box, {
    sx: {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      height: height,
      width: width
    }
  }, children);
};

var ProductSpecificationItem = function ProductSpecificationItem(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'productSpecification' : _ref$variant,
      data = _ref.data;
  return React.createElement(Flex, {
    variant: variant
  }, data === null || data === void 0 ? void 0 : data.map(function (specification) {
    var _specification$values;

    return React.createElement(Flex, {
      variant: variant + ".item",
      key: specification === null || specification === void 0 ? void 0 : specification.name
    }, React.createElement(Box, {
      variant: variant + ".item.name"
    }, specification === null || specification === void 0 ? void 0 : specification.name), specification === null || specification === void 0 ? void 0 : (_specification$values = specification.values) === null || _specification$values === void 0 ? void 0 : _specification$values.map(function (value) {
      return React.createElement(Box, {
        key: value,
        variant: variant + ".item.value"
      }, React.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: value
        }
      }));
    }));
  }));
};

var ProductSpecificationTitle = function ProductSpecificationTitle(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'productSpecification' : _ref$variant,
      children = _ref.children;
  return React.createElement(Heading, {
    variant: variant + ".title"
  }, children);
};

var ProductSpecification = function ProductSpecification(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'productSpecification' : _ref$variant,
      data = _ref.data;
  return React.createElement(React.Fragment, null, data === null || data === void 0 ? void 0 : data.map(function (group) {
    return React.createElement(Fragment, {
      key: group === null || group === void 0 ? void 0 : group.name
    }, React.createElement(ProductSpecificationTitle, {
      variant: variant
    }, group === null || group === void 0 ? void 0 : group.name), React.createElement(ProductSpecificationItem, {
      variant: variant,
      data: group === null || group === void 0 ? void 0 : group.specifications
    }));
  }));
};

var productSpecificationTheme = {
  productSpecification: {
    flexDirection: 'column',
    title: {
      mt: 4,
      mb: 2
    },
    item: {
      name: {
        flex: 1
      },
      value: {
        flex: 2
      }
    }
  }
};

var ProductDescription = function ProductDescription(_ref) {
  var data = _ref.data,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'productDescription' : _ref$variant;
  return jsx("div", {
    dangerouslySetInnerHTML: {
      __html: data
    },
    sx: {
      variant: variant + ".description"
    }
  });
};

var ProductDescriptionTitle = function ProductDescriptionTitle(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'productDescription' : _ref$variant,
      children = _ref.children;
  return React.createElement(Heading, {
    variant: variant + ".title"
  }, children);
};

var productDescriptionTheme = {
  productDescription: {
    flexDirection: 'column',
    title: {
      mt: 4,
      mb: 2
    }
  }
};

var NumericStepper = function NumericStepper(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'productQuantity' : _ref$variant,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? 'product-quantity' : _ref$id,
      minValue = _ref.minValue,
      _ref$maxValue = _ref.maxValue,
      maxValue = _ref$maxValue === void 0 ? Infinity : _ref$maxValue,
      onChange = _ref.onChange,
      children = _ref.children;

  var _React$useState = React.useState(1),
      quantity = _React$useState[0],
      setQuantity = _React$useState[1];

  var narrowedValue = useCallback(function (value) {
    return Math.min(Math.max(value, minValue), maxValue);
  }, [maxValue, minValue]);
  var updateQuantity = useCallback(function (value) {
    value = narrowedValue(value);
    setQuantity(value);
    onChange(value);
  }, [setQuantity, onChange, narrowedValue]);
  var isMax = quantity >= maxValue;
  var isMin = quantity <= minValue;
  return React.createElement(Fragment, null, React.createElement(Flex, {
    variant: variant + ".numericStepper"
  }, React.createElement(Button, {
    variant: variant + ".numericStepper.button.minus",
    onClick: function onClick() {
      return updateQuantity(quantity - 1);
    },
    disabled: isMin
  }, "-"), React.createElement(Input, {
    id: id,
    value: quantity,
    type: "number",
    onChange: function onChange(e) {
      return updateQuantity(Number(e.target.value));
    },
    variant: variant + ".numericStepper.input"
  }), React.createElement(Button, {
    variant: variant + ".numericStepper.button.plus",
    onClick: function onClick() {
      return updateQuantity(quantity + 1);
    },
    disabled: isMax
  }, "+"), children));
};

var ProductQuantityTitle = function ProductQuantityTitle(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'productDescription' : _ref$variant,
      children = _ref.children,
      _ref$htmlFor = _ref.htmlFor,
      htmlFor = _ref$htmlFor === void 0 ? 'product-quantity' : _ref$htmlFor;
  return React.createElement(Label, {
    htmlFor: htmlFor,
    variant: variant + ".title"
  }, children);
};

var productQuantityTheme = {
  productQuantity: {
    flexDirection: 'column',
    title: {
      mt: 4,
      mb: 2,
      color: '#717172',
      fontSize: '14px'
    },
    numericStepper: {
      alignItems: 'center',
      marginLeft: '5px',
      input: {
        width: 80,
        textAlign: 'center',
        margin: 0,
        boxSizing: 'border-box',
        borderStyle: 'solid',
        borderWidth: '0.125rem',
        borderColor: '#e3e4e6',
        borderRadius: 0
      },
      button: {
        transition: 'opacity 150ms',
        boxSizing: 'border-box',
        borderStyle: 'solid',
        borderColor: '#e3e4e6',
        backgroundColor: 'transparent',
        color: '#0f3e99',
        minus: {
          borderWidth: '0.125rem',
          borderTopRightRadius: 0,
          borderBottomRightRadius: 0,
          borderRightWidth: 0
        },
        plus: {
          marginRight: 20,
          borderWidth: '0.125rem',
          borderTopLeftRadius: 0,
          borderBottomLeftRadius: 0,
          borderLeftWidth: 0
        }
      }
    }
  }
};

var OfferPrice = function OfferPrice(_ref) {
  var children = _ref.children,
      variant = _ref.variant;
  return React.createElement(Box, {
    variant: "offer." + variant + ".price"
  }, children);
};

var OfferSoldOut = function OfferSoldOut(_ref) {
  var children = _ref.children,
      variant = _ref.variant;
  return React.createElement(Box, {
    variant: "offer." + variant + ".soldout"
  }, children);
};

var OfferListPrice = function OfferListPrice(_ref) {
  var variant = _ref.variant,
      children = _ref.children;
  return React.createElement(Box, {
    variant: "offer." + variant + ".listPrice"
  }, children);
};

var OfferContainer = function OfferContainer(_ref) {
  var children = _ref.children,
      variant = _ref.variant;
  return React.createElement(Box, {
    variant: "offer." + variant + ".container"
  }, children);
};

var OfferDiscountBadge = function OfferDiscountBadge(_ref) {
  var children = _ref.children,
      variant = _ref.variant;
  return React.createElement(Box, {
    variant: "offer." + variant + ".installments"
  }, children);
};

var OfferDiscountBadge$1 = function OfferDiscountBadge(_ref) {
  var children = _ref.children,
      variant = _ref.variant;

  if (children === 0) {
    return null;
  }

  return React.createElement(Box, {
    variant: "offer." + variant + ".discountBadge"
  }, children);
};

var ProductSummaryImage = function ProductSummaryImage(_ref) {
  var _ref$loading = _ref.loading,
      loading = _ref$loading === void 0 ? 'lazy' : _ref$loading,
      height = _ref.height,
      width = _ref.width,
      variant = _ref.variant,
      src = _ref.src,
      alt = _ref.alt;
  return React.createElement(AspectImage, {
    variant: "productSummary." + variant + ".image",
    src: src,
    ratio: 1,
    loading: loading,
    alt: alt,
    width: width,
    height: height
  });
};

var ProductSummaryTitle = function ProductSummaryTitle(_ref) {
  var variant = _ref.variant,
      children = _ref.children;
  return React.createElement(Box, {
    variant: "productSummary." + variant + ".title",
    as: "h3"
  }, children);
};

var ProductSummaryContainer = function ProductSummaryContainer(_ref) {
  var children = _ref.children,
      variant = _ref.variant,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "variant"]);

  return jsx(LocalizedLink, Object.assign({
    state: {
      fromSummary: true
    },
    sx: {
      variant: "productSummary." + variant + ".container"
    }
  }, rest), children);
};

var ProductDetailsTitle = function ProductDetailsTitle(_ref) {
  var variant = _ref.variant,
      children = _ref.children;
  return React.createElement(Box, {
    variant: "productDetails." + variant + ".title",
    as: "h1"
  }, children);
};

var ProductDetailsGallery = function ProductDetailsGallery(_ref) {
  var variant = _ref.variant,
      children = _ref.children;
  return React.createElement(Box, {
    variant: "productDetails." + variant + ".gallery",
    as: "h3"
  }, children);
};

var ProductDetailsReference = function ProductDetailsReference(_ref) {
  var variant = _ref.variant,
      children = _ref.children;
  return React.createElement(Box, {
    variant: "productDetails." + variant + ".reference"
  }, children);
};

var ButtonBox = Box;

var FloatingActionButton = function FloatingActionButton(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'floatingActionButton' : _ref$variant,
      children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["variant", "children"]);

  return React.createElement(Box, {
    variant: variant + ".container"
  }, React.createElement(ButtonBox, Object.assign({
    as: "button",
    variant: variant + ".button"
  }, rest), children));
};

var floatingActionButtonTheme = {
  floatingActionButton: {
    container: {
      position: 'fixed',
      bottom: '25px',
      right: '25px',
      zIndex: 999
    },
    button: {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      width: '67px',
      height: '67px',
      borderRadius: '50%',
      backgroundColor: 'primary',
      boxShadow: '2px 2px 15px #999',
      padding: '1rem',
      borderStyle: 'initial'
    }
  }
};

var GiftList = function GiftList(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'default' : _ref$variant,
      children = _ref.children;
  return React.createElement(Box, {
    variant: "giftList." + variant + ".container"
  }, children);
};

var GiftListTitle = function GiftListTitle(_ref) {
  var children = _ref.children,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'default' : _ref$variant;
  return React.createElement(Box, {
    variant: "giftList." + variant + ".title"
  }, children);
};

var GiftListList = function GiftListList(_ref) {
  var list = _ref.list,
      ItemComponent = _ref.ItemComponent,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'default' : _ref$variant;
  return React.createElement(Box, {
    variant: "giftList." + variant + ".list",
    as: "ul"
  }, list.map(function (item, index) {
    return React.createElement(Box, {
      key: "giftlist." + index,
      as: "li"
    }, React.createElement(ItemComponent, Object.assign({}, item)));
  }));
};

function _templateObject2() {
  var data = _taggedTemplateLiteralLoose(["\n    0% {\n      transform: translateX(0);\n    }\n    50% {\n      transform: translateX(calc(", " - 100px));\n    }\n    0% {\n      transform: translateX(0);\n    }\n  "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n      background-color: ", ";\n      border-radius: 4px;\n      display: block;\n      line-height: 1;\n      width: ", ";\n      height: ", ";\n      position: relative;\n      overflow: hidden;\n      margin-top: 4px;\n\n      ::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: linear-gradient(to left, #eee, #ddd, #eee);\n        animation: ", " 1.2s infinite;\n      }\n    "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var baseColor = '#eee';

var Skeleton = function Skeleton(_ref) {
  var _ref$width = _ref.width,
      width = _ref$width === void 0 ? '100%' : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? '50px' : _ref$height;
  return jsx$1("div", {
    css: css(_templateObject(), baseColor, width, height, keyframes(_templateObject2(), width))
  });
};

var extractVideoID = function extractVideoID(url) {
  var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/;
  var match = url.match(regExp);
  if (match && match[7].length === 11) return match[7];
  return null;
};

var getIframeSrc = function getIframeSrc(_ref) {
  var loop = _ref.loop,
      autoplay = _ref.autoplay,
      title = _ref.title,
      url = _ref.url;
  var params = "autoplay=" + autoplay + "&loop=" + loop + "&title=" + title + "&enablejsapi=1&iv_load_policy=3&modestbranding=1";
  var videoId = extractVideoID(url);
  return "https://www.youtube.com/embed/" + videoId + "?" + params;
};

var Youtube = function Youtube(props) {
  var iframeSrc = getIframeSrc(props);

  var iframeProps = _extends({}, props, {
    src: iframeSrc,
    frameBorder: 0,
    allowFullScreen: true
  });

  return React.createElement(Box, Object.assign({}, iframeProps, {
    as: "iframe"
  }));
};

var Video = function Video(props) {
  var innerVariant = props.variant + ".video";
  return React.createElement(AspectRatio, {
    ratio: 1,
    sx: {
      paddingTop: '20%'
    }
  }, React.createElement(AspectRatio, {
    ratio: 4 / 3
  }, React.createElement(Youtube, Object.assign({}, props, {
    sx: {
      width: '100%',
      height: '100%'
    },
    variant: innerVariant
  }))));
};

export { Banner, Breadcrumb, Center, FloatingActionButton, GiftList, GiftListList, GiftListTitle, Header, InfoCard, InfoCardImage, InfoCardInfo, InfoCardInfoAction, LocalizedLink, Logo, MinicartBadge, MinicartButton, MinicartButtonSvg, MinicartContent, MinicartDrawer, MinicartDrawerPrice, NumericStepper, OfferContainer, OfferDiscountBadge$1 as OfferDiscountBadge, OfferDiscountBadge as OfferInstallments, OfferListPrice, OfferPrice, OfferSoldOut, ProductDescription, ProductDescriptionTitle, ProductDetailsGallery, ProductDetailsReference, ProductDetailsTitle, ProductQuantityTitle, ProductSpecification, ProductSpecificationItem, ProductSpecificationTitle, ProductSummaryContainer, ProductSummaryImage, ProductSummaryTitle, ProgressiveImage, ResponsivePicture, RichMarkdown, SearchControls, SearchControlsFiltersButton, SearchControlsSelect, SearchControlsTotalCount, SearchFilterAccordion, SearchFilterAccordionItemCheckbox, Skeleton, SliderArrowLeft, SliderArrowRight, SliderPaginationDots, Video as VideoIframe, baseTheme, breadcrumbTheme, createTheme, debounce, floatingActionButtonTheme, headerTheme, CardTheme as infoCardTheme, minicartTheme, productDescriptionTheme, productQuantityTheme, productSpecificationTheme, responsivePicture as responsivePictureTheme, searchControlsTheme, searchFilterTheme, throttle, useInterval, useResponsiveSlider, useSlider };
//# sourceMappingURL=store-ui.esm.js.map
