"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onCreateWebpackConfig = void 0;
const schema_1 = require("@graphql-tools/schema");
const graphql_1 = require("graphql");
const webpack_1 = require("./webpack");
exports.onCreateWebpackConfig = ({ actions: { setWebpackConfig }, store, }) => __awaiter(void 0, void 0, void 0, function* () {
    /**
     * Here be Unicorns ðŸ¦„
     *
     * For some reason, gatsby's schema does not work well with
     * graphql-tools. We then stringify/parse the schema so
     * it works well with graphql-tools
     */
    const { schema: dirtySchema } = store.getState();
    const typeDefs = graphql_1.parse(graphql_1.printSchema(dirtySchema));
    const schema = schema_1.makeExecutableSchema({ typeDefs });
    setWebpackConfig({
        plugins: [new webpack_1.WebpackPlugin(schema)],
    });
});
