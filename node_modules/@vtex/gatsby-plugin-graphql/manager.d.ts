export interface CompiledQuery extends Node {
    sha256Hash: string;
}
export interface Node {
    filename: string;
    value: string;
    name: string;
}
/**
 * In memory presentation of GraphQL queries that appear in the code
 */
export declare class QueryManager {
    /**
     * Queries by name
     */
    queries: Map<string, Node | undefined>;
    /**
     * Fragments by name
     */
    fragments: Map<string, Node | undefined>;
    /**
     * Fragments by query name
     */
    fragmentsUsedByQuery: Map<string, Set<string> | undefined>;
    /**
     * Fragments by fragment name
     */
    fragmentsUsedByFragment: Map<string, Set<string> | undefined>;
    static getSingleton(): QueryManager;
    addQuery({ query: queryStr, filename, }: {
        query: string;
        filename: string;
    }): void;
    ensureRequiredFragments(queryName: string): boolean;
    getQueries(): CompiledQuery[];
    getFragments(): Node[];
    getUsedFragmentNamesForQuery(queryName: string): Set<string>;
    getNestedFragmentNamesForFragment(fragmentName: string, _fragments?: Set<string>): Set<string>;
    exportQuery(operationName: string): CompiledQuery;
    exportFragment(fragmentName: string): Node;
}
