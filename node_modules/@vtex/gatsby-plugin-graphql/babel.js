"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const manager_1 = require("./manager");
const GQL_TAG = 'gql';
const GATSBY_TAG = 'graphql';
const getGraphqlQuery = (path) => path.node.quasi.quasis
    .map((q) => q.value.cooked)
    .join('')
    .trim();
function babelGQLPlugin(babel) {
    const qm = manager_1.QueryManager.getSingleton();
    const t = babel.types;
    return {
        visitor: {
            Program: (p, state) => {
                const { file: { opts: { filename }, }, } = state;
                p.traverse({
                    TaggedTemplateExpression: (path) => {
                        var _a;
                        if (!path.node.loc) {
                            return;
                        }
                        const { tag } = path.node;
                        if (!t.isIdentifier(tag)) {
                            return;
                        }
                        // Tag needs to be graphql or gql
                        const isGraphqlTaggedTemplate = tag.name === GQL_TAG || tag.name === GATSBY_TAG;
                        if (!isGraphqlTaggedTemplate) {
                            return;
                        }
                        try {
                            const query = getGraphqlQuery(path);
                            // add graphql query to query manager for later extraction
                            qm.addQuery({ query, filename });
                            // If the tag is a gql tag, remove if from final code
                            if (tag.name === GQL_TAG) {
                                path.remove();
                            }
                        }
                        catch (error) {
                            throw path.buildCodeFrameError((_a = `GraphQL: ${error.message}`) !== null && _a !== void 0 ? _a : 'Unknown graphql parsing error');
                        }
                    },
                });
            },
        },
    };
}
exports.default = babelGQLPlugin;
