"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebpackPlugin = exports.target = exports.publicPath = exports.queryInfo = exports.persisted = void 0;
const path_1 = require("path");
const core_1 = require("@graphql-codegen/core");
const typeScriptPlugin = __importStar(require("@graphql-codegen/typescript"));
const typeScriptOperationsPlugin = __importStar(require("@graphql-codegen/typescript-operations"));
const relay_operation_optimizer_1 = require("@graphql-tools/relay-operation-optimizer");
const fs_extra_1 = require("fs-extra");
const graphql_1 = require("graphql");
const _1 = require(".");
const filesystem_1 = require("./filesystem");
const manager_1 = require("./manager");
const root = process.cwd();
exports.persisted = 'persisted.graphql.json';
exports.queryInfo = 'queryInfo.graphql.json';
exports.publicPath = '/page-data/_graphql';
exports.target = path_1.join(root, 'public', exports.publicPath);
const queryCode = ({ name, value, sha256Hash }) => `
export const ${name} = {
  query: ${_1.isProduction ? undefined : JSON.stringify(value)},
  sha256Hash: "${sha256Hash}",
  operationName: "${name}",
}
`;
const wrapTypes = (types, node) => `
/**
 * Warning: This is an autogenerated file.
 *
 * Changes in this file won't take effect and will be overwritten
 */

// Base Types
${typeScriptPlugin.EXACT_SIGNATURE}
type Maybe<T> = T | null | undefined
type Scalars = {
  Boolean: boolean
  String: string
  Float: number
  Int: number
  ID: string
}

// Operation related types
${types}

// Query Related Code
${node ? queryCode(node) : ''}
`;
const isQueryNode = (node) => typeof node.sha256Hash === 'string';
class WebpackPlugin {
    constructor(schema) {
        this.schema = schema;
        this.optimizeQuery = (query) => {
            const document = graphql_1.parse(query);
            const optimized = relay_operation_optimizer_1.optimizeDocuments(this.schema, [document], {
                includeFragments: false,
            });
            return graphql_1.print(optimized[0]);
        };
        this.generateCode = (nodes) => __awaiter(this, void 0, void 0, function* () {
            return Promise.all(nodes.map((node) => __awaiter(this, void 0, void 0, function* () {
                const { value, filename } = node, rest = __rest(node, ["value", "filename"]);
                const types = yield core_1.codegen({
                    config: {
                        preResolveTypes: true,
                        avoidOptionals: true,
                        enumsAsTypes: true,
                        skipTypeNameForRoot: true,
                        skipTypename: true,
                    },
                    documents: [{ document: graphql_1.parse(value) }],
                    // used by a plugin internally, although the 'typescript' plugin currently
                    // returns the string output, rather than writing to a file
                    filename,
                    schemaAst: this.schema,
                    schema: graphql_1.parse(graphql_1.printSchema(this.schema)),
                    // Plugins to use
                    pluginMap: {
                        typeScriptOperations: typeScriptOperationsPlugin,
                    },
                    // Plugins configurations
                    plugins: [
                        {
                            typeScriptOperations: {},
                        },
                    ],
                });
                const queryNode = isQueryNode(node) ? node : null;
                return Object.assign(Object.assign({}, rest), { value: wrapTypes(types, queryNode), filename });
            })));
        });
        this.persistedPath = path_1.join(root, 'public', exports.publicPath, exports.persisted);
        this.queryInfoPath = path_1.join(root, 'public', exports.publicPath, exports.queryInfo);
        fs_extra_1.mkdirSync(exports.target, { recursive: true });
    }
    apply(compiler) {
        compiler.hooks.done.tapPromise('gatsby-plugin-graphql', () => __awaiter(this, void 0, void 0, function* () {
            try {
                const manager = manager_1.QueryManager.getSingleton();
                const allQueries = manager.getQueries();
                const allFragments = manager.getFragments();
                if (allQueries.length === 0) {
                    return;
                }
                // -------------------------------------
                // Optimize queries using Relay Compiler
                const optimizedQueries = allQueries.map((_a) => {
                    var { value } = _a, rest = __rest(_a, ["value"]);
                    return (Object.assign({ value: this.optimizeQuery(value) }, rest));
                });
                // -------------------------------------
                // Create Persisted Query Map
                const persistedQueryMap = optimizedQueries.reduce((acc, { value, sha256Hash }) => {
                    acc[sha256Hash] = value;
                    return acc;
                }, {});
                yield fs_extra_1.outputJson(this.persistedPath, persistedQueryMap);
                // -------------------------------------
                // Create Query Info to be used in the browser for making requests
                const queryInfoMap = optimizedQueries.reduce((acc, { name, value, sha256Hash }) => {
                    acc[name] = { query: value, sha256Hash };
                    return acc;
                }, {});
                yield fs_extra_1.outputJson(this.queryInfoPath, queryInfoMap);
                // -------------------------------------
                // Generate code using @graphql-codegen
                const codeNodes = yield this.generateCode([
                    ...optimizedQueries,
                    ...allFragments,
                ]);
                // write generated files
                yield Promise.all(codeNodes.map(({ value, filename: filepath, name }) => __awaiter(this, void 0, void 0, function* () {
                    const filename = path_1.join(path_1.dirname(filepath), '__generated__', `${name}.graphql.ts`).replace('src/pages', 'src'); // Do not generate a folder inside src/pages otherwise gatsby's build breaks
                    return filesystem_1.outputFile(filename, value);
                })));
            }
            catch (err) {
                console.error('[gatsby-plugin-graphql]', err);
            }
        }));
    }
}
exports.WebpackPlugin = WebpackPlugin;
