"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = exports.gql = exports.isProduction = void 0;
exports.isProduction = process.env.NODE_ENV === 'production';
exports.gql = (_) => {
    throw new Error('This should have been removed by the babel plugin');
};
exports.request = (endpoint, { query, sha256Hash, operationName, variables, fetchOptions, }) => __awaiter(void 0, void 0, void 0, function* () {
    const method = exports.isProduction && operationName.endsWith('Query') ? 'GET' : 'POST';
    const extensions = exports.isProduction
        ? {
            persistedQuery: {
                sha256Hash,
            },
        }
        : undefined;
    const params = new URLSearchParams({
        operationName,
        extensions: extensions && JSON.stringify(extensions),
        variables: method === 'GET' ? JSON.stringify(variables) : undefined,
    });
    const url = `${endpoint}?${params.toString()}`;
    const body = method === 'POST'
        ? JSON.stringify({
            operationName,
            extensions,
            variables,
            query,
        })
        : undefined;
    const response = yield fetch(url, Object.assign({ method,
        body }, fetchOptions));
    return response.json();
});
