"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchVTEX = void 0;
const isomorphic_unfetch_1 = __importDefault(require("isomorphic-unfetch"));
const headers = {
    'content-type': 'application/json',
    accept: 'application/json',
};
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
function fetchRetry(path, init, retryCount = 3) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const response = yield isomorphic_unfetch_1.default(path, init);
            return yield response.json();
        }
        catch (err) {
            if (retryCount === 1) {
                throw err;
            }
            yield delay(300); // wait for 300ms
            return fetchRetry(path, init, retryCount - 1);
        }
    });
}
exports.fetchVTEX = (path, options, init) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const url = `https://${options.tenant}.${options.environment}.com.br${path}`;
        return yield fetchRetry(url, Object.assign(Object.assign({}, init), { headers: Object.assign(Object.assign({}, headers), init === null || init === void 0 ? void 0 : init.headers) }));
    }
    catch (err) {
        console.error(err);
        throw err;
    }
});
