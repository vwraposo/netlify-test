/**
 * Warning: This is an autogenerated file.
 *
 * Changes in this file won't take effect and will be overwritten
 */
declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
declare type Maybe<T> = T | null | undefined;
declare type Scalars = {
    Boolean: boolean;
    String: string;
    Float: number;
    Int: number;
};
export declare type SearchQueryQueryVariables = Exact<{
    query: Maybe<Scalars['String']>;
    map: Maybe<Scalars['String']>;
    fullText: Maybe<Scalars['String']>;
    selectedFacets: Maybe<Array<Vtex_SelectedFacetInput>>;
    from: Maybe<Scalars['Int']>;
    to: Maybe<Scalars['Int']>;
    orderBy: Maybe<Scalars['String']>;
}>;
export declare type SearchQueryQuery = {
    vtex: {
        productSearch: Maybe<{
            products: Maybe<Array<Maybe<{
                productId: Maybe<string>;
                productName: Maybe<string>;
                description: Maybe<string>;
                linkText: Maybe<string>;
                items: Maybe<Array<Maybe<{
                    itemId: Maybe<string>;
                    images: Maybe<Array<Maybe<{
                        imageUrl: Maybe<string>;
                        imageText: Maybe<string>;
                    }>>>;
                    sellers: Maybe<Array<Maybe<{
                        sellerId: Maybe<string>;
                        commertialOffer: Maybe<{
                            AvailableQuantity: Maybe<number>;
                            Price: Maybe<number>;
                            ListPrice: Maybe<number>;
                        }>;
                    }>>>;
                }>>>;
            }>>>;
        }>;
    };
};
export declare const SearchQuery: {
    query: string;
    sha256Hash: string;
    operationName: string;
};
export {};
