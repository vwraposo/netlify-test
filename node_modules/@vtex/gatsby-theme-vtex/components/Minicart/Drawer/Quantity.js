"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const gatsby_plugin_i18n_1 = require("@vtex/gatsby-plugin-i18n");
const store_ui_1 = require("@vtex/store-ui");
const react_1 = __importStar(require("react"));
const useItem_1 = require("./useItem");
const useUpdateItems_1 = require("./useUpdateItems");
const QuantityWrapper = ({ children, isLoading, variant, }) => (react_1.default.createElement(store_ui_1.Flex, { variant: variant },
    children,
    isLoading && (react_1.default.createElement(store_ui_1.Spinner, { variant: `${variant}.spinner`, width: 24, height: 24 }))));
const MinicartQuantity = (props) => {
    const updateItems = useUpdateItems_1.useUpdateItems(props.index);
    const { formatMessage } = gatsby_plugin_i18n_1.useIntl();
    const item = useItem_1.useItem(props.index);
    const [quantityLocally, setQuantityLocally] = react_1.useState(item.quantity);
    const [isLoading, setIsLoading] = react_1.useState(false);
    const onChange = (e) => {
        setIsLoading(true);
        const quantity = Number(e.target.value);
        setQuantityLocally(quantity);
        updateItems(quantity, () => setIsLoading(false));
    };
    const variant = `${props.variant}.quantity`;
    const useQuantity = {
        value: quantityLocally,
        variant,
        onChange,
    };
    return quantityLocally >= 10 ? (react_1.default.createElement(store_ui_1.Input, Object.assign({}, useQuantity))) : (react_1.default.createElement(QuantityWrapper, { isLoading: isLoading, variant: `${variant}.wrapper` },
        react_1.default.createElement(store_ui_1.Select, Object.assign({}, useQuantity),
            react_1.default.createElement("option", { value: 0 }, formatMessage({ id: 'minicart.drawer.quantity.remove' })),
            react_1.default.createElement("option", { value: 1 }, "1"),
            react_1.default.createElement("option", { value: 2 }, "2"),
            react_1.default.createElement("option", { value: 3 }, "3"),
            react_1.default.createElement("option", { value: 4 }, "4"),
            react_1.default.createElement("option", { value: 5 }, "5"),
            react_1.default.createElement("option", { value: 6 }, "6"),
            react_1.default.createElement("option", { value: 7 }, "7"),
            react_1.default.createElement("option", { value: 8 }, "8"),
            react_1.default.createElement("option", { value: 9 }, "9"),
            react_1.default.createElement("option", { value: 10 }, "10 +"))));
};
exports.default = MinicartQuantity;
