"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.query = exports.useShippingSimulator = void 0;
const react_1 = require("react");
const gatsby_plugin_graphql_1 = require("@vtex/gatsby-plugin-graphql");
const useLazyQuery_1 = require("../../../sdk/graphql/useLazyQuery");
const ShippingQuery_graphql_1 = require("./__generated__/ShippingQuery.graphql");
exports.useShippingSimulator = ({ initialPostalCode, skuId, seller, country, quantity, }) => {
    const [loading, setLoading] = react_1.useState(false);
    const [postalCode, setPostalCode] = react_1.useState(initialPostalCode !== null && initialPostalCode !== void 0 ? initialPostalCode : '');
    const [getShipping, { data: shipping }] = useLazyQuery_1.useLazyQuery(Object.assign({ variables: null }, ShippingQuery_graphql_1.ShippingQuery));
    const onSubmit = react_1.useCallback(() => {
        var _a;
        setLoading(true);
        getShipping({
            items: [{ id: skuId, seller, quantity: (_a = quantity === null || quantity === void 0 ? void 0 : quantity.toString()) !== null && _a !== void 0 ? _a : '1' }],
            country,
            postalCode,
        }).finally(() => {
            setLoading(false);
        });
    }, [postalCode, getShipping, country, seller, skuId]);
    // Recalculates the shipping information if the product quantity changes
    react_1.useEffect(() => {
        !loading && postalCode && onSubmit();
    }, [quantity]);
    return {
        shipping,
        loading,
        postalCode,
        setPostalCode,
        isValid: (postalCode === null || postalCode === void 0 ? void 0 : postalCode.length) === 9,
        onSubmit,
    };
};
exports.query = gatsby_plugin_graphql_1.gql `
  query ShippingQuery(
    $items: [VTEX_ShippingItem]
    $postalCode: String
    $country: String
  ) {
    vtex {
      shippingSLA(items: $items, postalCode: $postalCode, country: $country) {
        deliveryOptions {
          id
          estimate
          price
        }
      }
    }
  }
`;
