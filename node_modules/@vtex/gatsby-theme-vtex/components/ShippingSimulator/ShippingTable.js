"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const store_ui_1 = require("@vtex/store-ui");
const gatsby_plugin_i18n_1 = require("@vtex/gatsby-plugin-i18n");
const useNumberFormat_1 = require("../../sdk/localization/useNumberFormat");
const TranslateEstimate_1 = require("./TranslateEstimate");
const ShippingTable = ({ shipping, variant: tableVariant }) => {
    var _a, _b, _c, _d, _e;
    const intl = gatsby_plugin_i18n_1.useIntl();
    return ((_c = (_b = (_a = shipping === null || shipping === void 0 ? void 0 : shipping.vtex) === null || _a === void 0 ? void 0 : _a.shippingSLA) === null || _b === void 0 ? void 0 : _b.deliveryOptions) === null || _c === void 0 ? void 0 : _c.length) ? (react_1.default.createElement(store_ui_1.Box, { as: "table", variant: tableVariant },
        react_1.default.createElement(store_ui_1.Box, { as: "thead", variant: `${tableVariant}.thead` },
            react_1.default.createElement(store_ui_1.Box, { as: "tr", variant: `${tableVariant}.thead.row` },
                react_1.default.createElement(store_ui_1.Box, { as: "th", variant: `${tableVariant}.thead.id` }, intl.formatMessage({ id: 'shipping.label.id' })),
                react_1.default.createElement(store_ui_1.Box, { as: "th", variant: `${tableVariant}.thead.estimate` }, intl.formatMessage({ id: 'shipping.label.estimate' })),
                react_1.default.createElement(store_ui_1.Box, { as: "th", variant: `${tableVariant}.thead.price` }, intl.formatMessage({ id: 'shipping.label.price' })))),
        react_1.default.createElement(store_ui_1.Box, { as: "tbody", variant: `${tableVariant}.tbody` }, (_e = (_d = shipping === null || shipping === void 0 ? void 0 : shipping.vtex.shippingSLA) === null || _d === void 0 ? void 0 : _d.deliveryOptions) === null || _e === void 0 ? void 0 : _e.map((option) => {
            if (!(option === null || option === void 0 ? void 0 : option.estimate) || !option.id)
                return null;
            const shippingOptionProps = {
                id: option.id,
                price: option.price,
                estimate: option.estimate,
            };
            return (react_1.default.createElement(ShippingOption, Object.assign({ variant: tableVariant, key: shippingOptionProps.id }, shippingOptionProps)));
        })))) : null;
};
const ShippingOption = ({ id, price, estimate, variant, }) => {
    const format = useNumberFormat_1.useNumberFormat();
    const intl = gatsby_plugin_i18n_1.useIntl();
    const freightPrice = react_1.useMemo(() => {
        if (price === 0) {
            return intl.formatMessage({ id: 'shipping.free' });
        }
        if (!price) {
            return '-';
        }
        return format.format(price / 100);
    }, [price, format, intl]);
    return (react_1.default.createElement(store_ui_1.Box, { as: "tr", variant: `${variant}.optionRow` },
        react_1.default.createElement(store_ui_1.Box, { as: "td", variant: `${variant}.idCell` },
            react_1.default.createElement(store_ui_1.Box, { as: "label", variant: `${variant}.idLabel` },
                react_1.default.createElement("input", { type: "radio", name: "shipping-option" }),
                id)),
        react_1.default.createElement(store_ui_1.Box, { as: "td", variant: `${variant}.estimateCell` },
            react_1.default.createElement(TranslateEstimate_1.TranslateEstimate, { shippingEstimate: estimate })),
        react_1.default.createElement(store_ui_1.Box, { as: "td", variant: `${variant}.priceCell` }, freightPrice)));
};
exports.default = ShippingTable;
