"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const gatsby_plugin_i18n_1 = require("@vtex/gatsby-plugin-i18n");
const store_ui_1 = require("@vtex/store-ui");
const react_1 = __importDefault(require("react"));
const Container_1 = require("../base/Container");
const hooks_1 = require("../base/hooks");
const List_1 = require("../base/List");
const Title_1 = require("../base/Title");
const hooks_2 = require("./hooks");
const SearchSuggestionsTopSearches = ({ variant }) => {
    var _a;
    const { formatMessage } = gatsby_plugin_i18n_1.useIntl();
    const { query: { data, error }, searchBar: { onSearch }, } = hooks_2.useTopSearches();
    const searches = (_a = data === null || data === void 0 ? void 0 : data.vtex.topSearches) === null || _a === void 0 ? void 0 : _a.searches;
    const items = searches && hooks_1.toRequiredItem(searches);
    const title = formatMessage({
        id: 'suggestions.topSearches.title',
        defaultMessage: 'Top Searches',
    });
    if (error || !searches) {
        return null;
    }
    if (searches.length === 0) {
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(Title_1.SearchSuggestionsListTitle, { variant: variant, title: title }),
            react_1.default.createElement(store_ui_1.Center, null, formatMessage({
                id: 'suggestions.topSearches.empty',
                defaultMessage: 'Type to search',
            }))));
    }
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(Title_1.SearchSuggestionsListTitle, { variant: variant, title: title }),
        react_1.default.createElement(List_1.SearchSuggestionsList, { items: items, variant: variant }, ({ item: { term }, index, variant: v }) => (react_1.default.createElement(store_ui_1.Box, { variant: v, onClick: () => onSearch(term) },
            react_1.default.createElement("span", null,
                ++index,
                "\u00B0"),
            " ",
            term)))));
};
const SearchSuggestions = ({ variant = 'topSearches' }) => (react_1.default.createElement(Container_1.SearchSuggestionsListContainer, { variant: variant, fallback: null },
    react_1.default.createElement(SearchSuggestionsTopSearches, { variant: variant })));
exports.default = SearchSuggestions;
