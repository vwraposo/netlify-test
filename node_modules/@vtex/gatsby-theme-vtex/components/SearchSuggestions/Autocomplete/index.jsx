"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const store_ui_1 = require("@vtex/store-ui");
const gatsby_plugin_i18n_1 = require("@vtex/gatsby-plugin-i18n");
const hooks_1 = require("./hooks");
const Container_1 = require("../base/Container");
const Title_1 = require("../base/Title");
const List_1 = require("../base/List");
const hooks_2 = require("../base/hooks");
const SearchSuggestionsAutocomplete = ({ variant, term: t, }) => {
    var _a;
    const { formatMessage } = gatsby_plugin_i18n_1.useIntl();
    const { query: { data, error }, setTerm, searchBar: { onSearch }, } = hooks_1.useAutocompleteSearchSeggestions({ term: t });
    const searches = (_a = data === null || data === void 0 ? void 0 : data.vtex.autocompleteSearchSuggestions) === null || _a === void 0 ? void 0 : _a.searches;
    const items = searches && hooks_2.toRequiredItem(searches);
    if (error || !searches) {
        return null;
    }
    if (searches.length === 0) {
        return (<>
        <Title_1.SearchSuggestionsListTitle variant={variant} title={formatMessage({
            id: 'suggestions.autocomplete.title',
            defaultMessage: 'Suggestions',
        })}/>
        <store_ui_1.Center>
          {formatMessage({
            id: 'suggestions.autocomplete.notFound',
            defaultMessage: 'No suggestions',
        })}
        </store_ui_1.Center>
      </>);
    }
    return (<>
      <Title_1.SearchSuggestionsListTitle variant={variant} title={formatMessage({
        id: 'suggestions.autocomplete.title',
        defaultMessage: 'Suggestions',
    })}/>
      <List_1.SearchSuggestionsList items={items} variant={variant}>
        {({ item: { term }, variant: v }) => (<store_ui_1.Box as="span" variant={v} onClick={() => onSearch(term)} onMouseEnter={() => setTerm(term)}>
            {term}
          </store_ui_1.Box>)}
      </List_1.SearchSuggestionsList>
    </>);
};
const SearchSuggestions = ({ variant = 'autocomplete', term }) => (<Container_1.SearchSuggestionsListContainer variant={variant} fallback={null}>
    <SearchSuggestionsAutocomplete variant={variant} term={term}/>
  </Container_1.SearchSuggestionsListContainer>);
exports.default = SearchSuggestions;
