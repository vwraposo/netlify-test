"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.query = exports.useProductsSuggestions = void 0;
const gatsby_plugin_graphql_1 = require("@vtex/gatsby-plugin-graphql");
const useQuery_1 = require("../../../sdk/graphql/useQuery");
const hooks_1 = require("../base/hooks");
const ProductsSuggestionsQuery_graphql_1 = require("./__generated__/ProductsSuggestionsQuery.graphql");
exports.useProductsSuggestions = ({ maxItems, term }) => {
    var _a, _b;
    const context = hooks_1.useSearchSuggestionsContext();
    const response = useQuery_1.useQuery(Object.assign(Object.assign({}, ProductsSuggestionsQuery_graphql_1.ProductsSuggestionsQuery), { variables: {
            fullText: term,
        }, suspense: false }));
    const query = Object.assign(Object.assign({}, response), { data: response.data && {
            vtex: {
                productSuggestions: {
                    count: (_a = response.data.vtex.productSuggestions) === null || _a === void 0 ? void 0 : _a.count,
                    products: (_b = response.data.vtex.productSuggestions) === null || _b === void 0 ? void 0 : _b.products.slice(0, maxItems),
                },
            },
        } });
    return Object.assign({ query }, context);
};
exports.query = gatsby_plugin_graphql_1.gql `
  query ProductsSuggestionsQuery(
    $fullText: String!
    $facetKey: String
    $facetValue: String
    $productOriginVtex: Boolean = false
    $simulationBehavior: VTEX_SimulationBehavior = default
  ) {
    vtex {
      productSuggestions(
        fullText: $fullText
        facetKey: $facetKey
        facetValue: $facetValue
        productOriginVtex: $productOriginVtex
        simulationBehavior: $simulationBehavior
      ) {
        count
        products {
          key: productId
          ...ProductSummary_product
        }
      }
    }
  }
`;
