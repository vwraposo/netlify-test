import { ProductsSuggestionsQueryQuery } from './__generated__/ProductsSuggestionsQuery.graphql';
interface Props {
    term: string;
    maxItems: number;
}
export declare const useProductsSuggestions: ({ maxItems, term }: Props) => {
    searchBar: import("../../SearchBar/hooks").ISearchContext;
    setTerm: (t: string) => unknown;
    term: string;
    query: {
        data: {
            vtex: {
                productSuggestions: {
                    count: number | undefined;
                    products: ({
                        productId: string | null | undefined;
                        productName: string | null | undefined;
                        linkText: string | null | undefined;
                        key: string | null | undefined;
                        productClusters: ({
                            name: string | null | undefined;
                        } | null | undefined)[] | null | undefined;
                        items: ({
                            itemId: string | null | undefined;
                            images: ({
                                imageUrl: string | null | undefined;
                                imageText: string | null | undefined;
                            } | null | undefined)[] | null | undefined;
                            sellers: ({
                                sellerId: string | null | undefined;
                                commercialOffer: {
                                    spotPrice: number | null | undefined;
                                    availableQuantity: number | null | undefined;
                                    price: number | null | undefined;
                                    listPrice: number | null | undefined;
                                    maxInstallments: ({
                                        value: number | null | undefined;
                                        numberOfInstallments: number | null | undefined;
                                    } | null | undefined)[] | null | undefined;
                                    installments: ({
                                        value: number | null | undefined;
                                        numberOfInstallments: number | null | undefined;
                                        interestRate: number | null | undefined;
                                    } | null | undefined)[] | null | undefined;
                                    teasers: {
                                        name: string | null | undefined;
                                    }[] | null | undefined;
                                } | null | undefined;
                            } | null | undefined)[] | null | undefined;
                        } | null | undefined)[] | null | undefined;
                    } | null | undefined)[] | undefined;
                };
            };
        } | undefined;
        error?: any[] | undefined;
        revalidate: () => Promise<boolean>;
        mutate: (data?: ProductsSuggestionsQueryQuery | Promise<ProductsSuggestionsQueryQuery> | import("swr/dist/types").mutateCallback<ProductsSuggestionsQueryQuery> | undefined, shouldRevalidate?: boolean | undefined) => Promise<ProductsSuggestionsQueryQuery | undefined>;
        isValidating: boolean;
    };
};
export declare const query: never;
export {};
