"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const store_ui_1 = require("@vtex/store-ui");
const react_1 = __importStar(require("react"));
const gatsby_plugin_i18n_1 = require("@vtex/gatsby-plugin-i18n");
const Container_1 = require("../base/Container");
const Title_1 = require("../base/Title");
const Total_1 = require("../base/Total");
const List_1 = require("../base/List");
const hooks_1 = require("./hooks");
const hooks_2 = require("../base/hooks");
const ProductSummary = react_1.lazy(() => Promise.resolve().then(() => __importStar(require('../../ProductSummary'))));
const SearchSuggestionsProduct = ({ term, variant, maxItems, }) => {
    var _a;
    const { formatMessage } = gatsby_plugin_i18n_1.useIntl();
    const { query: { data, error }, searchBar: { onSearch }, } = hooks_1.useProductsSuggestions({
        maxItems,
        term,
    });
    const count = (_a = data === null || data === void 0 ? void 0 : data.vtex.productSuggestions) === null || _a === void 0 ? void 0 : _a.count;
    const products = data === null || data === void 0 ? void 0 : data.vtex.productSuggestions.products;
    const items = products && hooks_2.toRequiredItem(products);
    const title = formatMessage({
        id: 'suggestions.products.title',
        defaultMessage: 'Products for: {term}',
    }, { term });
    const total = formatMessage({
        id: 'suggestions.products.total',
        defaultMessage: 'See all {count} items',
    }, { count });
    if (error) {
        return null;
    }
    if (!products) {
        return (<>
        <Title_1.SearchSuggestionsListTitle variant={variant} title={title}/>
        <store_ui_1.Center>
          <store_ui_1.Spinner />
        </store_ui_1.Center>
      </>);
    }
    if (count === 0) {
        return (<>
        <Title_1.SearchSuggestionsListTitle variant={variant} title={title}/>
        <store_ui_1.Center>
          {formatMessage({
            id: 'suggestions.products.notFound',
            defaultMessage: 'No products found',
        })}
        </store_ui_1.Center>
      </>);
    }
    return (<>
      <Title_1.SearchSuggestionsListTitle variant={variant} title={title}/>
      <List_1.SearchSuggestionsList items={items} variant={variant}>
        {({ item, variant: v }) => (<store_ui_1.Box variant={v}>
            <react_1.Suspense fallback={null}>
              <ProductSummary product={item}/>
            </react_1.Suspense>
          </store_ui_1.Box>)}
      </List_1.SearchSuggestionsList>
      <Total_1.SearchSuggestionsListTotal variant={variant} onClick={() => onSearch(term)}>
        {total}
      </Total_1.SearchSuggestionsListTotal>
    </>);
};
const SearchSuggestions = ({ variant = 'products', maxItems = 3, term, }) => (<Container_1.SearchSuggestionsListContainer variant={variant}>
    <SearchSuggestionsProduct maxItems={maxItems} variant={variant} term={term}/>
  </Container_1.SearchSuggestionsListContainer>);
exports.default = SearchSuggestions;
