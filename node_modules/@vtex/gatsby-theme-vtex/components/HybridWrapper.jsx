"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const env_1 = require("../utils/env");
globalThis.__REACT_HYDRATED__ = false;
const HybridWrapper = ({ fallback, isPrerendered, children }) => {
    const [isHydrated, setIsHydrated] = react_1.useState(globalThis.__REACT_HYDRATED__);
    react_1.useEffect(() => {
        globalThis.__REACT_HYDRATED__ = true;
        // we only need to change  this component's state when this
        // page is dynamic. Pre-rendered pages are already ok
        if (!isPrerendered) {
            setIsHydrated(true);
        }
    }, [isPrerendered]);
    if (isPrerendered) {
        if (env_1.isServer) {
            return <>{children}</>;
        }
        return <react_1.Suspense fallback={fallback}>{children}</react_1.Suspense>;
    }
    if (isHydrated) {
        return <react_1.Suspense fallback={fallback}>{children}</react_1.Suspense>;
    }
    return <>{fallback}</>;
};
exports.default = HybridWrapper;
