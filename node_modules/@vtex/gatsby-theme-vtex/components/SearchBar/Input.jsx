"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const store_ui_1 = require("@vtex/store-ui");
const hooks_1 = require("./hooks");
const SearchBarInput = (_a) => {
    var { variant, children, popoverState } = _a, forward = __rest(_a, ["variant", "children", "popoverState"]);
    const { syncTerm, setTerm, onSearch } = hooks_1.useSearchBarContext();
    const ref = react_1.useRef(null); // reference input
    const referenceRef = react_1.useRef(null); // reference container
    const _b = store_ui_1.usePopoverState(popoverState), { toggle: t } = _b, popover = __rest(_b, ["toggle"]);
    const { show, visible } = popover;
    // When clicking in the input, always open but never close
    // search autocomplete
    const toggle = react_1.useCallback(() => {
        if (!visible) {
            show();
        }
    }, [show, visible]);
    react_1.useEffect(() => {
        var _a, _b;
        // Focus input when input is clicked
        if (popover.visible) {
            (_a = ref.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
        // Blurs input when user clicks away
        else {
            (_b = ref.current) === null || _b === void 0 ? void 0 : _b.blur();
        }
    }, [popover.visible]);
    return (<store_ui_1.Box variant={`${variant}.textInput`} ref={referenceRef}>
      <store_ui_1.PopoverDisclosure toggle={toggle} as="input" type="search" role="searchbox" {...forward} {...popover} ref={ref} unstable_referenceRef={referenceRef} onChange={(e) => {
        if (typeof e.target.value === 'string') {
            setTerm(e.target.value);
        }
    }} onKeyUp={(e) => {
        if (e.key === 'Enter' && syncTerm) {
            onSearch(syncTerm);
        }
    }} aria-expanded={null}/>
      <store_ui_1.Popover tabIndex={0} aria-label="Searchbar Input" {...popover}>
        {visible ? children : null}
      </store_ui_1.Popover>
    </store_ui_1.Box>);
};
exports.default = SearchBarInput;
