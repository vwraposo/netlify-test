"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const gatsby_1 = require("gatsby");
const react_1 = __importDefault(require("react"));
const react_helmet_async_1 = require("react-helmet-async");
const env_1 = require("../../utils/env");
const SEO = ({ description, lang = 'en', meta = [], title }) => {
    const { site } = gatsby_1.useStaticQuery(gatsby_1.graphql `
      query SiteMetadataQuery {
        site {
          siteMetadata {
            title
            description
            author
          }
        }
      }
    `);
    const { siteMetadata } = site;
    const metaDescription = description !== null && description !== void 0 ? description : siteMetadata.description;
    const defer = !env_1.isBot;
    return (<react_helmet_async_1.Helmet defer={defer} async={defer} htmlAttributes={{
        lang,
    }} title={title !== null && title !== void 0 ? title : siteMetadata.title} titleTemplate={`%s | ${siteMetadata.title}`} meta={[
        {
            name: 'description',
            content: metaDescription,
        },
        {
            property: 'og:title',
            content: title,
        },
        {
            property: 'og:description',
            content: metaDescription,
        },
        {
            property: 'og:type',
            content: 'website',
        },
        {
            name: 'twitter:card',
            content: 'summary',
        },
        {
            name: 'twitter:creator',
            content: siteMetadata.author,
        },
        {
            name: 'twitter:title',
            content: title,
        },
        {
            name: 'twitter:description',
            content: metaDescription,
        },
    ].concat(meta)}/>);
};
exports.default = SEO;
