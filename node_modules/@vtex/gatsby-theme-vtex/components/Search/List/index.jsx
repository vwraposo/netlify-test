"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.query = void 0;
/* eslint-disable react-hooks/rules-of-hooks */
const gatsby_plugin_graphql_1 = require("@vtex/gatsby-plugin-graphql");
const store_ui_1 = require("@vtex/store-ui");
const react_1 = __importStar(require("react"));
const gatsby_plugin_i18n_1 = require("@vtex/gatsby-plugin-i18n");
const SearchQuery_graphql_1 = require("./__generated__/SearchQuery.graphql");
const OverlaySpinner_1 = __importDefault(require("./OverlaySpinner"));
const Page_1 = __importDefault(require("./Page"));
const useSearch_1 = require("../../../sdk/search/useSearch");
const List = ({ initialData, columns, pageSize }) => {
    const { formatMessage } = gatsby_plugin_i18n_1.useIntl();
    const { data, fetchMore, isLoadingMore, isReachingEnd } = useSearch_1.useSearch({
        query: SearchQuery_graphql_1.SearchQuery,
        initialData,
        pageSize,
    });
    const loadMoreLabel = formatMessage({ id: 'search.page-list.more' });
    const loadingLabel = formatMessage({ id: 'search.page-list.more.loading' });
    if (!data) {
        return <OverlaySpinner_1.default />;
    }
    return (<react_1.Fragment>
      <store_ui_1.Grid variant="search" columns={columns}>
        {data.map((searchQuery, index) => (<Page_1.default key={`summary-page-${index}`} products={searchQuery.vtex.productSearch.products}/>))}
      </store_ui_1.Grid>
      <store_ui_1.Button variant="loadMore" onClick={(e) => {
        var _a, _b;
        ;
        (_b = (_a = e.target).blur) === null || _b === void 0 ? void 0 : _b.call(_a);
        fetchMore();
    }} aria-label={loadMoreLabel} disabled={isReachingEnd || isLoadingMore}>
        {isReachingEnd ? '' : isLoadingMore ? loadingLabel : loadMoreLabel}
      </store_ui_1.Button>
    </react_1.Fragment>);
};
exports.query = gatsby_plugin_graphql_1.gql `
  query SearchQuery(
    $query: String
    $map: String
    $fullText: String
    $selectedFacets: [VTEX_SelectedFacetInput!]
    $from: Int
    $to: Int
    $orderBy: String
  ) {
    vtex {
      productSearch(
        productOriginVtex: true
        hideUnavailableItems: true
        selectedFacets: $selectedFacets
        fullText: $fullText
        query: $query
        map: $map
        from: $from
        to: $to
        orderBy: $orderBy
      ) {
        products {
          ...ProductSummary_product
        }
      }
    }
  }
`;
exports.default = List;
