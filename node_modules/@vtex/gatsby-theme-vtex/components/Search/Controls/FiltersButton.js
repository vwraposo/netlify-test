"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchControlsFiltersButton = void 0;
const react_1 = __importStar(require("react"));
const gatsby_plugin_i18n_1 = require("@vtex/gatsby-plugin-i18n");
const store_ui_1 = require("@vtex/store-ui");
const SearchFiltersDrawer = react_1.lazy(() => Promise.resolve().then(() => __importStar(require('../Filters/Mobile'))));
exports.SearchControlsFiltersButton = (_a) => {
    var { variant } = _a, props = __rest(_a, ["variant"]);
    const { formatMessage } = gatsby_plugin_i18n_1.useIntl();
    const [active, setActive] = react_1.useState(false);
    const toggle = react_1.useCallback(() => setActive(!active), [active]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(store_ui_1.SearchControlsFiltersButton, { label: formatMessage({ id: 'searchControls.filters' }), variant: variant, onClick: toggle }),
        active ? (react_1.default.createElement(react_1.Suspense, { fallback: null },
            react_1.default.createElement(SearchFiltersDrawer, Object.assign({}, props, { toggle: toggle, isOpen: active })))) : null));
};
