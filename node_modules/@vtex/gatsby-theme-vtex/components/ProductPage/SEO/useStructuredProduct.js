"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fragment = exports.useStructuredProduct = void 0;
const gatsby_1 = require("gatsby");
const react_1 = require("react");
const getSkuOffers = (sku, currency) => { var _a; return (_a = sku.sellers) === null || _a === void 0 ? void 0 : _a.map((seller) => ({
    '@type': 'Offer',
    price: seller.commercialOffer.price,
    priceCurrency: currency,
    priceValidUntil: `${seller.commercialOffer.priceValidUntil}`,
    availability: seller.commercialOffer.availableQuantity > 0
        ? 'http://schema.org/InStock'
        : 'http://schema.org/OutOfStock',
})); };
exports.useStructuredProduct = (product, currency) => react_1.useMemo(() => {
    if (product === null) {
        return '';
    }
    const { productName, items, description, brand } = product;
    const [sku] = items;
    const images = sku.images.map((i) => i.imageUrl);
    const offers = getSkuOffers(sku, currency);
    if (!sku || !images || !offers || offers.length === 0 || !brand) {
        return null;
    }
    return {
        '@context': 'https://schema.org/',
        '@type': 'Product',
        name: productName,
        image: images,
        offers,
        sku: sku.itemId,
        brand: {
            '@type': 'Brand',
            name: brand,
        },
        description,
    };
}, [product, currency]);
exports.fragment = gatsby_1.graphql `
  fragment StructuredProductFragment_product on VTEX_Product {
    productName
    description
    brand
    items {
      itemId
      images {
        imageUrl
      }
      sellers {
        commercialOffer: commertialOffer {
          price: Price
          availableQuantity: AvailableQuantity
          priceValidUntil: PriceValidUntil
        }
      }
    }
  }
`;
