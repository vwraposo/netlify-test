"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const store_ui_1 = require("@vtex/store-ui");
const gatsby_plugin_i18n_1 = require("@vtex/gatsby-plugin-i18n");
const SignUpForm = ({ variant, onSubmit, onBack, state: { state, email }, }) => {
    const { formatMessage } = gatsby_plugin_i18n_1.useIntl();
    const code = react_1.useRef(null);
    const password = react_1.useRef(null);
    const confirmPwd = react_1.useRef(null);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(store_ui_1.Box, { variant: `${variant}.title` }, formatMessage({
            id: 'login.page.emailAndPassword.signUpForm.title',
            defaultMessage: 'Validate email and create new password',
        })),
        react_1.default.createElement(store_ui_1.Box, { variant: `${variant}.subTitle` }, formatMessage({
            id: 'login.page.emailAndPassword.signUpForm.subTitle',
            defaultMessage: 'Insert the code we sent to the email {email} and create a new password',
        }, {
            email,
        })),
        react_1.default.createElement(store_ui_1.Box, { as: "form", onSubmit: (e) => {
                var _a, _b, _c, _d, _e, _f;
                e.preventDefault();
                onSubmit((_b = (_a = code.current) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : '', (_d = (_c = password.current) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : '', (_f = (_e = confirmPwd.current) === null || _e === void 0 ? void 0 : _e.value) !== null && _f !== void 0 ? _f : '');
            }, variant: variant },
            react_1.default.createElement(store_ui_1.Input, { ref: code, type: "text", name: "code", id: "code", placeholder: formatMessage({
                    id: 'login.page.emailAndPassword.signUpForm.accessCodePlaceholder',
                    defaultMessage: 'Add your access code',
                }) }),
            react_1.default.createElement(store_ui_1.Input, { ref: password, type: "password", name: "password", id: "password", placeholder: formatMessage({
                    id: 'login.page.emailAndPassword.signUpForm.passwordPlaceholder',
                    defaultMessage: 'Insert your password',
                }), autoComplete: "new-password" }),
            react_1.default.createElement(store_ui_1.Input, { ref: confirmPwd, type: "password", name: "password", id: "confirm-password", placeholder: formatMessage({
                    id: 'login.page.emailAndPassword.signUpForm.confirmPasswordPlaceholder',
                    defaultMessage: 'Confirm your password',
                }), autoComplete: "new-password" }),
            state === 'signUpForm.invalidAccessCodeInput' && (react_1.default.createElement(store_ui_1.Alert, { variant: "signInDanger" }, formatMessage({
                id: 'login.page.emailAndPassword.signUpForm.invalidAccessCodeInput',
                defaultMessage: 'Invalid access code',
            }))),
            state === 'signUpForm.invalidPassword' && (react_1.default.createElement(store_ui_1.Alert, { variant: "signInDanger" }, formatMessage({
                id: 'login.page.emailAndPassword.signUpForm.invalidPassword',
                defaultMessage: 'Invalid password. Your password needs to have at least eight digits, one lower case and one upper case letter, with at least one digit',
            }))),
            state === 'signUpForm.passwordDoNotMatch' && (react_1.default.createElement(store_ui_1.Alert, { variant: "signInDanger" }, formatMessage({
                id: 'login.page.emailAndPassword.signUpForm.passwordDoNotMatch',
                defaultMessage: 'Passwords do not match',
            }))),
            state === 'signUpForm.error' && (react_1.default.createElement(store_ui_1.Alert, { variant: "signInDanger" }, formatMessage({
                id: 'login.page.emailAndPassword.signUpForm.error',
                defaultMessage: 'Signing in failed. Please try again later',
            }))),
            react_1.default.createElement(store_ui_1.Button, null, formatMessage({
                id: 'login.page.emailAndPassword.signUpForm.submitButton',
                defaultMessage: 'Create',
            }))),
        react_1.default.createElement(store_ui_1.Button, { onClick: (e) => {
                e.preventDefault();
                onBack();
            } }, formatMessage({
            id: 'login.page.emailAndPassword.signUpForm.backButton',
            defaultMessage: 'Back',
        }))));
};
exports.default = SignUpForm;
