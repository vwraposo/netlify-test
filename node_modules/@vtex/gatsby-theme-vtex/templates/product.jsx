"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.query = void 0;
const react_1 = __importStar(require("react"));
const gatsby_1 = require("gatsby");
const ErrorBoundary_1 = __importDefault(require("../components/Error/ErrorBoundary"));
const HybridWrapper_1 = __importDefault(require("../components/HybridWrapper"));
const Layout_1 = __importDefault(require("../components/Layout"));
const AboveTheFold_1 = __importDefault(require("../components/ProductPage/AboveTheFold"));
const AboveTheFoldPreview_1 = __importDefault(require("../components/ProductPage/AboveTheFoldPreview"));
const BelowTheFoldPreview_1 = __importDefault(require("../components/ProductPage/BelowTheFoldPreview"));
const Viewport_1 = __importDefault(require("../components/Suspense/Viewport"));
const useQuery_1 = require("../sdk/graphql/useQuery");
const ProductPageQuery_graphql_1 = require("./__generated__/ProductPageQuery.graphql");
const SEO_1 = __importDefault(require("../components/ProductPage/SEO"));
const ErrorHandler_1 = __importDefault(require("../components/Error/ErrorHandler"));
const belowTheFoldPreloader = () => Promise.resolve().then(() => __importStar(require('../components/ProductPage/BelowTheFold')));
const BelowTheFold = react_1.lazy(belowTheFoldPreloader);
const ProductPage = (props) => {
    var _a;
    const { data: initialData, pageContext, slug: routeSlug } = props;
    const { staticPath } = pageContext;
    const slug = ((_a = pageContext.slug) !== null && _a !== void 0 ? _a : routeSlug);
    const { data } = useQuery_1.useQuery(Object.assign(Object.assign({}, ProductPageQuery_graphql_1.ProductPageQuery), { variables: { slug, staticPath: true }, suspense: true, initialData: staticPath ? initialData : undefined }));
    if (!(data === null || data === void 0 ? void 0 : data.vtex.product)) {
        return <div>Product Not Found</div>;
    }
    const pageProps = Object.assign(Object.assign({}, props), { data,
        slug });
    return (<react_1.Fragment>
      <AboveTheFold_1.default {...pageProps}/>
      <SEO_1.default {...pageProps} data={data}/>
      <Viewport_1.default fallback={<BelowTheFoldPreview_1.default />} preloader={belowTheFoldPreloader}>
        <BelowTheFold {...pageProps}/>
      </Viewport_1.default>
    </react_1.Fragment>);
};
const Page = (props) => {
    const { pageContext: { staticPath }, } = props;
    return (<Layout_1.default>
      <HybridWrapper_1.default isPrerendered={staticPath} fallback={<AboveTheFoldPreview_1.default />}>
        <ErrorBoundary_1.default fallback={(error) => <ErrorHandler_1.default error={error}/>}>
          <ProductPage {...props}/>
        </ErrorBoundary_1.default>
      </HybridWrapper_1.default>
    </Layout_1.default>);
};
exports.query = gatsby_1.graphql `
  query ProductPageQuery($slug: String, $staticPath: Boolean!) {
    vtex {
      product(slug: $slug) @include(if: $staticPath) {
        ...ProductDetailsTemplate_product
        ...StructuredProductFragment_product
        productId
        description
        categoryTree {
          name
          href
        }
        items {
          itemId
        }
      }
    }
  }
`;
exports.default = Page;
