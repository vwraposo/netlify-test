/**
 * Warning: This is an autogenerated file.
 *
 * Changes in this file won't take effect and will be overwritten
 */
declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
declare type Maybe<T> = T | null | undefined;
declare type Scalars = {
    Boolean: boolean;
    String: string;
    Float: number;
    Int: number;
    ID: string;
};
export declare type SearchPageQueryQueryVariables = Exact<{
    query: Maybe<Scalars['String']>;
    map: Maybe<Scalars['String']>;
    fullText: Maybe<Scalars['String']>;
    staticPath: Scalars['Boolean'];
    selectedFacets: Maybe<Vtex_SelectedFacetInput[]>;
    orderBy?: Maybe<Scalars['String']>;
}>;
export declare type SearchPageQueryQuery = {
    vtex: {
        productSearch: Maybe<{
            titleTag: Maybe<string>;
            recordsFiltered: Maybe<number>;
            products: Maybe<Array<Maybe<{
                productId: Maybe<string>;
                productName: Maybe<string>;
                linkText: Maybe<string>;
                items: Maybe<Array<Maybe<{
                    itemId: Maybe<string>;
                    images: Maybe<Array<Maybe<{
                        imageUrl: Maybe<string>;
                        imageText: Maybe<string>;
                    }>>>;
                }>>>;
            }>>>;
        }>;
        facets: Maybe<{
            breadcrumb: Maybe<Array<Maybe<{
                href: Maybe<string>;
                name: Maybe<string>;
            }>>>;
            facets: Maybe<Array<Maybe<{
                name: Maybe<string>;
                type: Maybe<Vtex_FilterType>;
                values: Maybe<Array<Maybe<{
                    key: Maybe<string>;
                    name: Maybe<string>;
                    value: Maybe<string>;
                    selected: Maybe<boolean>;
                    quantity: number;
                    values: Maybe<Array<Maybe<{
                        key: Maybe<string>;
                        name: Maybe<string>;
                        value: Maybe<string>;
                        selected: Maybe<boolean>;
                        quantity: number;
                        values: Maybe<Array<Maybe<{
                            key: Maybe<string>;
                            name: Maybe<string>;
                            value: Maybe<string>;
                            selected: Maybe<boolean>;
                            quantity: number;
                        }>>>;
                    }>>>;
                }>>>;
            }>>>;
        }>;
    };
};
export declare const SearchPageQuery: {
    query: undefined;
    sha256Hash: string;
    operationName: string;
};
export {};
