"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.query = void 0;
/* eslint-disable no-shadow */
const gatsby_1 = require("gatsby");
const react_1 = __importStar(require("react"));
const ErrorBoundary_1 = __importDefault(require("../components/Error/ErrorBoundary"));
const ErrorHandler_1 = __importDefault(require("../components/Error/ErrorHandler"));
const HybridWrapper_1 = __importDefault(require("../components/HybridWrapper"));
const Layout_1 = __importDefault(require("../components/Layout"));
const AboveTheFold_1 = __importDefault(require("../components/SearchPage/AboveTheFold"));
const AboveTheFoldPreview_1 = __importDefault(require("../components/SearchPage/AboveTheFoldPreview"));
const BelowTheFoldPreview_1 = __importDefault(require("../components/SearchPage/BelowTheFoldPreview"));
const SEO_1 = __importDefault(require("../components/SearchPage/SEO"));
const Viewport_1 = __importDefault(require("../components/Suspense/Viewport"));
const useQuery_1 = require("../sdk/graphql/useQuery");
const usePixelSendEvent_1 = require("../sdk/pixel/usePixelSendEvent");
const Provider_1 = require("../sdk/search/Provider");
const useSearchFiltersFromPageContext_1 = require("../sdk/search/useSearchFiltersFromPageContext");
const env_1 = require("../utils/env");
const SearchPageQuery_graphql_1 = require("./__generated__/SearchPageQuery.graphql");
const belowTheFoldPreloader = () => Promise.resolve().then(() => __importStar(require('../components/SearchPage/BelowTheFold')));
const BelowTheFold = react_1.lazy(belowTheFoldPreloader);
const SearchPage = (props) => {
    const { pageContext, data: staticData } = props;
    const { staticPath } = pageContext;
    const filters = useSearchFiltersFromPageContext_1.useSearchFiltersFromPageContext(pageContext);
    const { data } = useQuery_1.useQuery(Object.assign(Object.assign({}, SearchPageQuery_graphql_1.SearchPageQuery), { variables: Object.assign(Object.assign({}, filters), { staticPath: true }), suspense: true, initialData: staticPath ? staticData : undefined }));
    usePixelSendEvent_1.usePixelSendEvent(() => {
        var _a, _b, _c;
        return [
            {
                type: 'vtex:pageView',
                data: {
                    pageUrl: window.location.href,
                    pageTitle: document.title,
                    referrer: document.referrer,
                    accountName: process.env.GATSBY_VTEX_TENANT,
                },
            },
            {
                type: 'vtex:internalSiteSearchView',
                data: {
                    accountName: process.env.GATSBY_VTEX_TENANT,
                    pageUrl: window.location.href,
                    pageTitle: document.title,
                    referrer: document.referrer,
                    term: (_a = filters.fullText) !== null && _a !== void 0 ? _a : '',
                    results: (_c = (_b = data === null || data === void 0 ? void 0 : data.vtex.productSearch) === null || _b === void 0 ? void 0 : _b.recordsFiltered) !== null && _c !== void 0 ? _c : 0,
                },
            },
        ];
    }, env_1.isServer ? '' : window.location.href);
    return (react_1.default.createElement(Provider_1.SearchProvider, { filters: filters, data: data },
        react_1.default.createElement(AboveTheFold_1.default, Object.assign({}, props, { data: data })),
        react_1.default.createElement(SEO_1.default, Object.assign({}, props, { data: data })),
        react_1.default.createElement(Viewport_1.default, { fallback: react_1.default.createElement(BelowTheFoldPreview_1.default, null), preloader: belowTheFoldPreloader },
            react_1.default.createElement(BelowTheFold, null))));
};
const Page = (props) => {
    const { pageContext: { staticPath }, } = props;
    return (react_1.default.createElement(Layout_1.default, null,
        react_1.default.createElement(HybridWrapper_1.default, { isPrerendered: staticPath, fallback: react_1.default.createElement(AboveTheFoldPreview_1.default, null) },
            react_1.default.createElement(ErrorBoundary_1.default, { fallback: (error) => react_1.default.createElement(ErrorHandler_1.default, { error: error }) },
                react_1.default.createElement(SearchPage, Object.assign({}, props))))));
};
exports.query = gatsby_1.graphql `
  query SearchPageQuery(
    $query: String
    $map: String
    $fullText: String
    $staticPath: Boolean!
    $selectedFacets: [VTEX_SelectedFacetInput!]
    $orderBy: String = "OrderByScoreDESC"
  ) {
    vtex {
      productSearch(
        from: 0
        to: 9
        hideUnavailableItems: true
        productOriginVtex: true
        simulationBehavior: skip
        orderBy: $orderBy
        query: $query
        map: $map
        fullText: $fullText
        selectedFacets: $selectedFacets
      ) @include(if: $staticPath) {
        products {
          productId
          productName
          linkText
          items {
            itemId
            images {
              imageUrl
              imageText
            }
          }
        }
        titleTag
        recordsFiltered
      }
      facets(
        query: $query
        map: $map
        fullText: $fullText
        selectedFacets: $selectedFacets
        operator: or
        behavior: "Static"
      ) @include(if: $staticPath) {
        breadcrumb {
          href
          name
        }
        facets {
          name
          type
          values {
            key
            name
            value
            selected
            quantity
            values: children {
              key
              name
              value
              selected
              quantity
              values: children {
                key
                name
                value
                selected
                quantity
              }
            }
          }
        }
      }
    }
  }
`;
exports.default = Page;
