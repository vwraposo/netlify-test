"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const gatsby_transformer_vtex_cms_1 = require("@vtex/gatsby-transformer-vtex-cms");
const react_1 = __importStar(require("react"));
const react_helmet_async_1 = require("react-helmet-async");
const Block_1 = __importDefault(require("../components/cms/Block"));
const iframe_1 = require("../components/cms/iframe");
const localStorage_1 = require("../components/cms/localStorage");
const env_1 = require("../utils/env");
if (!env_1.isServer) {
    iframe_1.setupIframeListener();
}
const Preview = () => {
    const content = localStorage_1.useLocalStorage(iframe_1.CMS_CONTENT);
    const isContent = gatsby_transformer_vtex_cms_1.isContent(content);
    if (!isContent || !content) {
        return <div>No Preview found. Waiting for input</div>;
    }
    const { beforeBlocks, blocks, afterBlocks, extraBlocks } = content;
    const { title, slug } = gatsby_transformer_vtex_cms_1.getMeta(extraBlocks);
    return (<>
      <react_helmet_async_1.Helmet>
        <title>{title}</title>
      </react_helmet_async_1.Helmet>
      <div>slug: {slug}</div>
      {beforeBlocks === null || beforeBlocks === void 0 ? void 0 : beforeBlocks.map((block, index) => (<react_1.Suspense key={`block-${index}`} fallback={<div>Loading...</div>}>
          <Block_1.default block={block}/>
        </react_1.Suspense>))}
      {blocks.map((block, index) => (<react_1.Suspense key={`block-${index}`} fallback={<div>Loading...</div>}>
          <Block_1.default block={block}/>
        </react_1.Suspense>))}
      {afterBlocks === null || afterBlocks === void 0 ? void 0 : afterBlocks.map((block, index) => (<react_1.Suspense key={`block-${index}`} fallback={<div>Loading...</div>}>
          <Block_1.default block={block}/>
        </react_1.Suspense>))}
    </>);
};
exports.default = Preview;
