"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const gatsby_plugin_i18n_1 = require("@vtex/gatsby-plugin-i18n");
const store_ui_1 = require("@vtex/store-ui");
const Providers_1 = require("../components/Auth/Providers");
const Layout_1 = __importDefault(require("../components/Layout"));
const SSR_1 = __importDefault(require("../components/Suspense/SSR"));
const useOnLoginSuccessful_1 = require("../sdk/auth/useOnLoginSuccessful");
const useProfile_1 = require("../sdk/session/useProfile");
const Page = () => {
    var _a;
    const onLoginSuccessful = useOnLoginSuccessful_1.useOnLoginSuccessful();
    const { formatMessage } = gatsby_plugin_i18n_1.useIntl();
    const [index, setIndex] = react_1.useState(0);
    const { Component } = Providers_1.AUTH_PROVIDERS[index];
    const profile = useProfile_1.useProfile({ stale: false });
    const isAuthenticated = ((_a = profile === null || profile === void 0 ? void 0 : profile.isAuthenticated) === null || _a === void 0 ? void 0 : _a.value) === 'true';
    react_1.useEffect(() => {
        if (isAuthenticated) {
            onLoginSuccessful('/account');
        }
    }, [isAuthenticated, onLoginSuccessful]);
    if (isAuthenticated) {
        return (<store_ui_1.Center height="200px">
        <store_ui_1.Spinner />
      </store_ui_1.Center>);
    }
    return (<store_ui_1.Flex variant="login.page.container">
      <store_ui_1.Box variant="login.page.group">
        <store_ui_1.Box variant="login.page.group.title">
          {formatMessage({
        id: 'login.page.title',
        defaultMessage: 'Choose a sign in option',
    })}
        </store_ui_1.Box>

        {Providers_1.AUTH_PROVIDERS.map(({ Button: ButtonComponent }, i) => i !== index ? (<ButtonComponent key={i} variant="login.page" onClick={() => setIndex(i)}/>) : null)}
      </store_ui_1.Box>

      <store_ui_1.Box variant="login.page.group">
        <SSR_1.default fallback={<store_ui_1.Center height="200px">
              <store_ui_1.Spinner />
            </store_ui_1.Center>}>
          <Component variant="page"/>
        </SSR_1.default>
      </store_ui_1.Box>
    </store_ui_1.Flex>);
};
// We split into two components to avoid re-rendering the <Layout/> when
// selecting Auth method
const PageWithLayout = () => (<Layout_1.default>
    <SSR_1.default fallback={<store_ui_1.Center height="300px">
          <store_ui_1.Spinner />
        </store_ui_1.Center>}>
      <Page />
    </SSR_1.default>
  </Layout_1.default>);
exports.default = PageWithLayout;
