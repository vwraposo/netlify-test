"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBuyButton = void 0;
const react_1 = require("react");
const usePixelSendEvent_1 = require("../pixel/usePixelSendEvent");
const useOrderForm_1 = require("../orderForm/useOrderForm");
const useBestSeller_1 = require("../product/useBestSeller");
exports.useBuyButton = (sku, quantity) => {
    const [loading, setLoading] = react_1.useState(false);
    const seller = useBestSeller_1.useBestSeller(sku);
    const orderForm = useOrderForm_1.useOrderForm();
    const disabled = loading || !sku || !(orderForm === null || orderForm === void 0 ? void 0 : orderForm.value) || !seller;
    // Optimist add item on click
    const onClick = (e) => __awaiter(void 0, void 0, void 0, function* () {
        e.preventDefault();
        if (disabled) {
            return;
        }
        // Item to be updated into the orderForm
        const orderFormItem = {
            id: Number(sku.itemId),
            quantity,
            seller: seller.sellerId,
        };
        try {
            setLoading(true);
            const items = [orderFormItem];
            yield orderForm.addToCart(items);
            usePixelSendEvent_1.sendPixelEvent({
                type: 'vtex:addToCart',
                data: {
                    items,
                },
            });
        }
        catch (err) {
            console.error(err);
        }
        finally {
            setLoading(false);
        }
    });
    return {
        disabled,
        onClick,
        loading,
    };
};
