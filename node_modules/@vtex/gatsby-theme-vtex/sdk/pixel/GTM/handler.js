"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const getDataFromEvent = (event) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    switch (event.type) {
        case 'vtex:pageView': {
            return Object.assign({ event: 'pageView', location: event.data.pageUrl, page: event.data.pageUrl.replace(window.origin, ''), referrer: event.data.referrer }, (event.data.pageTitle && {
                title: event.data.pageTitle,
            }));
        }
        case 'vtex:productView': {
            // TODO: Add SELECTED SKU and category
            if (!event.data.product) {
                return;
            }
            const { productName, brand, items } = event.data.product;
            const price = (_d = (_c = (_b = (_a = items === null || items === void 0 ? void 0 : items[0]) === null || _a === void 0 ? void 0 : _a.sellers) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.commercialOffer) === null || _d === void 0 ? void 0 : _d.price;
            return {
                ecommerce: {
                    detail: {
                        products: [
                            {
                                brand,
                                name: productName,
                                price,
                            },
                        ],
                    },
                },
                event: 'productDetail',
            };
        }
        case 'vtex:productClick': {
            // TODO: Add brand, categories and sku
            const { productName, items } = event.data.product;
            const price = (_h = (_g = (_f = (_e = items === null || items === void 0 ? void 0 : items[0]) === null || _e === void 0 ? void 0 : _e.sellers) === null || _f === void 0 ? void 0 : _f[0]) === null || _g === void 0 ? void 0 : _g.commercialOffer) === null || _h === void 0 ? void 0 : _h.price;
            return {
                event: 'productClick',
                ecommerce: {
                    click: {
                        products: [
                            {
                                name: productName,
                                price,
                            },
                        ],
                    },
                },
            };
        }
        case 'vtex:addToCart': {
            // TODO: add currency, brand, category, id, name, price, variant
            const { items } = event.data;
            return {
                ecommerce: {
                    add: {
                        products: items.map((sku) => ({
                            quantity: sku.quantity,
                        })),
                    },
                },
                event: 'addToCart',
            };
        }
        case 'vtex:removeFromCart': {
            // TODO: add currency
            const { items } = event.data;
            return {
                ecommerce: {
                    remove: {
                        products: items.map((sku) => ({
                            brand: sku.brand,
                            id: sku.skuId,
                            category: sku.category,
                            name: sku.name,
                            price: `${sku.price}`,
                            quantity: sku.quantity,
                            variant: sku.variant,
                        })),
                    },
                },
                event: 'removeFromCart',
            };
        }
        case 'vtex:orderPlaced': {
            const order = event.data;
            return Object.assign(Object.assign({ event: 'orderPlaced' }, order), { ecommerce: {
                    purchase: {
                        actionField: {
                            affiliation: order.transactionAffiliation,
                            coupon: order.coupon ? order.coupon : null,
                            id: order.orderGroup,
                            revenue: order.transactionTotal,
                            shipping: order.transactionShipping,
                            tax: order.transactionTax,
                        },
                        products: order.transactionProducts.map((product) => {
                            var _a;
                            return ({
                                brand: product.brand,
                                category: (_a = product.categoryTree) === null || _a === void 0 ? void 0 : _a.join('/'),
                                id: product.sku,
                                name: product.name,
                                price: product.price,
                                quantity: product.quantity,
                                variant: product.skuName,
                            });
                        }),
                    },
                } });
        }
        case 'vtex:productImpression': {
            // TODO: add currency, brand, itemId, price and skuName
            const { list, impressions } = event.data;
            const parsedImpressions = (impressions || []).map(({ product, position }) => ({
                list,
                name: product.productName,
                position,
            }));
            return {
                event: 'productImpression',
                ecommerce: {
                    impressions: parsedImpressions,
                },
            };
        }
        case 'vtex:userData': {
            const { data } = event;
            if (!data.isAuthenticated) {
                return;
            }
            return {
                event: 'userData',
                userId: data.id,
            };
        }
        case 'vtex:cartLoaded': {
            const { orderForm } = event.data;
            return {
                event: 'checkout',
                ecommerce: {
                    checkout: {
                        actionField: {
                            step: 1,
                        },
                        products: orderForm.items.map((item) => {
                            var _a, _b, _c;
                            return ({
                                id: item.id,
                                name: item.name,
                                category: Object.keys((_a = item.productCategories) !== null && _a !== void 0 ? _a : {}).reduce((categories, category) => categories ? `${categories}/${category}` : category, ''),
                                brand: (_c = (_b = item.additionalInfo) === null || _b === void 0 ? void 0 : _b.brandName) !== null && _c !== void 0 ? _c : '',
                                variant: item.skuName,
                                price: typeof item.sellingPrice === 'number'
                                    ? item.sellingPrice / 100
                                    : undefined,
                                quantity: item.quantity,
                            });
                        }),
                    },
                },
            };
        }
        default:
    }
};
exports.handler = (event) => {
    const data = getDataFromEvent(event);
    if (data) {
        window.dataLayer.push(data);
    }
};
