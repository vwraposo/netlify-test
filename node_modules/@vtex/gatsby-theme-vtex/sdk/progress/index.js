"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onRouteUpdate = exports.Progress = void 0;
const react_1 = require("react");
const store_ui_1 = require("@vtex/store-ui");
const useIdleEffect_1 = require("../useIdleEffect");
const loadController = () => Promise.resolve().then(() => __importStar(require('./controller')));
let progress = null;
const timeouts = [];
const TRANSITION_AFTER_MS = 300;
exports.Progress = ({ children, location }) => {
    const { theme: { colors }, } = store_ui_1.useThemeUI();
    // Load and Setup nprogress once the browser is idle
    useIdleEffect_1.useIdleEffect(() => {
        ;
        (() => __awaiter(void 0, void 0, void 0, function* () {
            const controller = yield loadController();
            // nprogress default options
            progress = controller.setup({
                color: colors.primary,
                showSpinner: false,
                trickleSpeed: 100,
            });
        }))();
    }, [colors]);
    // Starts progress bar after milliseconds
    react_1.useMemo(() => {
        if (progress && location.pathname) {
            const id = setTimeout(() => progress === null || progress === void 0 ? void 0 : progress.start(), TRANSITION_AFTER_MS);
            timeouts.push(id);
        }
    }, [location.pathname]);
    return children;
};
// Once the route is updated, clean scheduled timeouts
// and eventual progress bar being displayed
exports.onRouteUpdate = () => {
    if (!progress) {
        return;
    }
    timeouts.forEach(clearTimeout);
    progress.done();
};
