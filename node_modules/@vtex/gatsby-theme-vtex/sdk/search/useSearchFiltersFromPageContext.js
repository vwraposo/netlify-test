"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSearchFiltersFromPageContext = void 0;
const router_1 = require("@reach/router");
const react_1 = require("react");
const defaults_1 = require("./defaults");
// Creates a string with as many `c,c` as pathname has
// segments.
// For instance: cozinha/faqueiro-e-talheres would
// generate the string c,c
//
// TODO: this function may have to change in the future
const createMap = (query) => {
    const splitted = query.split('/');
    // We have generated all departments/brands statically, so it's safe
    // to assume that, if the process reach this code, the path
    // is a full text search
    if (splitted.length === 1) {
        return 'ft';
    }
    return new Array(splitted.length).fill('c').join(',');
};
// I think this function should change to a more simpler version.
const selectedFacetsAfterQueryAndMap = (query, map) => {
    const smap = map.split(',');
    const squery = query.split('/');
    const selectedFacets = [];
    for (let it = 0; it < smap.length; it++) {
        selectedFacets.push({ key: smap[it], value: squery[it] });
    }
    return selectedFacets;
};
// Removes starting/ending slashes
// ex: trimQuery('/p0/p1/') -> 'p0/p1'
//
// Slice is done only once to improve performance !
//
// TODO: This function should be removed eventually
const trimQuery = (query) => {
    const i = query[0] === '/' ? 1 : 0;
    const j = query[query.length - 1] === '/' ? query.length - 1 : query.length;
    return query.slice(i, j);
};
exports.useSearchFiltersFromPageContext = (pageContext) => {
    const location = router_1.useLocation();
    return react_1.useMemo(() => {
        var _a, _b, _c, _d, _e, _f;
        const { search, pathname } = location;
        const params = new URLSearchParams(search);
        const query = (_a = pageContext === null || pageContext === void 0 ? void 0 : pageContext.query) !== null && _a !== void 0 ? _a : trimQuery(pathname);
        const map = (_c = (_b = pageContext === null || pageContext === void 0 ? void 0 : pageContext.map) !== null && _b !== void 0 ? _b : params.get('map')) !== null && _c !== void 0 ? _c : createMap(query);
        const selectedFacets = (_d = pageContext === null || pageContext === void 0 ? void 0 : pageContext.selectedFacets) !== null && _d !== void 0 ? _d : selectedFacetsAfterQueryAndMap(query, map);
        const fullText = map.startsWith('ft') ? query.split('/')[0] : undefined;
        const orderBy = (_f = (_e = pageContext === null || pageContext === void 0 ? void 0 : pageContext.orderBy) !== null && _e !== void 0 ? _e : params.get('orderBy')) !== null && _f !== void 0 ? _f : defaults_1.SearchFilterDefaults.orderBy;
        return {
            orderBy,
            selectedFacets,
            fullText,
            query,
            map,
        };
    }, [pageContext, location]);
};
