"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSearch = void 0;
const react_1 = require("react");
const useQueryInfinite_1 = require("../graphql/useQueryInfinite");
const useFilters_1 = require("./useFilters");
const PAGE_SIZE = 10;
exports.useSearch = ({ query, initialData, pageSize = PAGE_SIZE, }) => {
    var _a;
    const filters = useFilters_1.useFilters();
    const { data, error, size, setSize } = useQueryInfinite_1.useQueryInfinite(query, (page, previousPageData) => {
        var _a, _b;
        if (page !== 0 &&
            ((_b = (_a = previousPageData === null || previousPageData === void 0 ? void 0 : previousPageData.vtex.productSearch) === null || _a === void 0 ? void 0 : _a.products) === null || _b === void 0 ? void 0 : _b.length) === 0) {
            return null;
        }
        const from = page * pageSize;
        const to = (page + 1) * pageSize - 1;
        return Object.assign(Object.assign({}, filters), { from,
            to });
    }, {
        revalidateOnMount: true,
        initialData: initialData && [initialData],
        initialSize: 2,
    });
    const fetchMore = react_1.useCallback(() => setSize((s) => s + 1), [setSize]);
    // Since we prefetch the next page, we always render one page less from
    // what we have in memory
    const viewSize = Math.max(1, size - 1);
    // The code below was copied from SWR's own repo example
    // https://codesandbox.io/s/swr-infinite-z6r0r?file=/src/App.js
    const isLoadingInitialData = !data && !error;
    const isLoadingMore = isLoadingInitialData ||
        !!(data && typeof data[viewSize - 1] === 'undefined');
    const isEmpty = ((_a = data === null || data === void 0 ? void 0 : data[0]) === null || _a === void 0 ? void 0 : _a.vtex.productSearch.products.length) === 0;
    const isReachingEnd = isEmpty ||
        !!(data &&
            data[viewSize - 1] &&
            data[viewSize - 1].vtex.productSearch.products.length < pageSize);
    return {
        fetchMore,
        isLoadingMore,
        isReachingEnd,
        data: data === null || data === void 0 ? void 0 : data.slice(0, viewSize),
        error,
    };
};
