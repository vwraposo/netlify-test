"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toggleItem = exports.setSearchFilters = exports.search = exports.history = void 0;
const router_1 = require("@reach/router");
const uniq_1 = require("../../utils/uniq");
const HISTORY_KEY = 'vtex-search-history';
const MAX_ITEMS = 10;
exports.history = {
    get: () => { var _a; return JSON.parse((_a = localStorage.getItem(HISTORY_KEY)) !== null && _a !== void 0 ? _a : '[]'); },
    add: (term) => {
        const h = exports.history.get();
        const updatedHistory = uniq_1.uniqBy([term, ...h].slice(0, MAX_ITEMS), (t) => t);
        localStorage.setItem(HISTORY_KEY, JSON.stringify(updatedHistory));
    },
};
exports.search = (term) => {
    exports.history.add(term);
    router_1.navigate(`/${encodeURI(term)}`);
};
exports.setSearchFilters = (filters) => {
    const { search: searchParams } = window.location;
    const params = new URLSearchParams(searchParams);
    Object.keys(filters).forEach((key) => {
        const value = filters[key];
        if (value && key !== 'query' && key !== 'selectedFacets') {
            params.set(key, value);
        }
    });
    const to = `/${filters.query}?${params.toString()}`;
    router_1.navigate(to);
};
// TODO: This function can be moved to the backend if we have a decent graphql layer
exports.toggleItem = (item, filters) => {
    const { selected, value, key } = item;
    let { map, query } = filters;
    if (selected) {
        const splittedQuery = query === null || query === void 0 ? void 0 : query.split('/');
        const splittedMap = map === null || map === void 0 ? void 0 : map.split(',');
        const index = splittedQuery === null || splittedQuery === void 0 ? void 0 : splittedQuery.findIndex((s) => s === value);
        // Unselecting the base path. This is not allowed since it would redirect
        // the user to the home page. In the future we should return a visual
        // feedback for the user
        if (index === 0) {
            return;
        }
        // eslint-disable-next-line no-console
        console.assert(index !== undefined && index > -1, `${value} is marked as selected but does not exist in ${query}`);
        splittedQuery === null || splittedQuery === void 0 ? void 0 : splittedQuery.splice(index, 1);
        query = splittedQuery === null || splittedQuery === void 0 ? void 0 : splittedQuery.join('/');
        splittedMap === null || splittedMap === void 0 ? void 0 : splittedMap.splice(index, 1);
        map = splittedMap === null || splittedMap === void 0 ? void 0 : splittedMap.join(',');
    }
    else {
        query = `${query}/${value}`;
        map = `${map},${key}`;
    }
    exports.setSearchFilters(Object.assign(Object.assign({}, filters), { query,
        map }));
};
