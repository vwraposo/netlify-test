"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFacets = void 0;
const react_1 = require("react");
const Provider_1 = require("./Provider");
const loadController = () => Promise.resolve().then(() => __importStar(require('./controller')));
const NAME_FROM_TYPE = {
    BRAND: 'Brand',
    CATEGORYTREE: 'Departments',
    TEXT: 'text',
    PRICERANGE: 'Price Ranges',
};
const focusCategoryFacet = (facet, filters) => {
    const { query, map } = filters;
    const splittedQuery = query === null || query === void 0 ? void 0 : query.split('/');
    const splittedMap = map === null || map === void 0 ? void 0 : map.split(',');
    let focus = facet;
    if (!splittedMap || !splittedQuery) {
        return focus;
    }
    for (let i = 0; i < splittedMap.length; i++) {
        const m = splittedMap[i];
        if (m !== 'c') {
            return focus;
        }
        const maybeFacet = focus.values.find((item) => item.value.toLowerCase() === splittedQuery[i].toLowerCase());
        if (!maybeFacet) {
            return focus;
        }
        focus = maybeFacet;
    }
    return focus;
};
exports.useFacets = () => {
    const { filters, data: { vtex: { facets: staticFacets }, }, } = react_1.useContext(Provider_1.SearchContext);
    const toggleItem = (item) => __awaiter(void 0, void 0, void 0, function* () {
        const controller = yield loadController();
        controller.toggleItem(item, filters);
    });
    const fixedFacets = react_1.useMemo(() => staticFacets.facets.reduce((acc, rawFacet) => {
        const facet = (rawFacet === null || rawFacet === void 0 ? void 0 : rawFacet.type) === 'CATEGORYTREE'
            ? focusCategoryFacet(rawFacet, filters)
            : rawFacet;
        // Skip empty facets
        if (!facet) {
            return acc;
        }
        // Fill facet name
        facet.name = facet.name || NAME_FROM_TYPE[facet.type];
        acc.push(facet);
        return acc;
    }, []), [staticFacets, filters]);
    return {
        facets: fixedFacets,
        toggleItem,
    };
};
