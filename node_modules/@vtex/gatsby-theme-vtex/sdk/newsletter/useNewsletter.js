"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const addToNewsletter = (data) => __awaiter(void 0, void 0, void 0, function* () {
    return fetch('/api/dataentities/NL/documents/', {
        headers: {
            'Content-Type': 'application/json',
            accept: 'application/vnd.vtex.ds.v10+json',
        },
        method: 'PATCH',
        body: JSON.stringify(Object.assign(Object.assign({}, data), { isNewsletterOptIn: true })),
    }).then((response) => {
        if (response.ok) {
            return response.json();
        }
        throw new Error();
    });
});
const useNewsletter = () => {
    const [loading, setLoading] = react_1.useState(false);
    const [data, setData] = react_1.useState(null);
    const [error, setError] = react_1.useState(false);
    const addUser = react_1.useCallback((user) => {
        setError(false);
        setData(null);
        setLoading(true);
        return addToNewsletter(user)
            .then((response) => {
            setData(response);
        })
            .catch(() => {
            setError(true);
        })
            .finally(() => {
            setLoading(false);
        });
    }, [setError, setData, setLoading]);
    const reset = react_1.useCallback(() => {
        setData(null);
        setError(false);
        setLoading(false);
    }, []);
    return {
        error,
        addUser,
        loading,
        data,
        reset,
    };
};
exports.default = useNewsletter;
