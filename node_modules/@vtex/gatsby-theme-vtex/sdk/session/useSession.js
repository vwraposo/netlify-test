"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSession = void 0;
const react_1 = require("react");
const swr_1 = __importDefault(require("swr"));
const controller_1 = require("./controller");
const storage_1 = require("./storage");
const initialData = storage_1.storage.get();
exports.useSession = (options) => {
    var _a, _b;
    const fresh = (options === null || options === void 0 ? void 0 : options.stale) === false ||
        ((_b = (_a = initialData === null || initialData === void 0 ? void 0 : initialData.namespaces.profile) === null || _a === void 0 ? void 0 : _a.isAuthenticated) === null || _b === void 0 ? void 0 : _b.value) === 'true';
    const { data, mutate } = swr_1.default('/api/sessions', {
        fetcher: controller_1.create,
        initialData: fresh ? undefined : initialData,
        revalidateOnFocus: false,
        revalidateOnMount: false,
        revalidateOnReconnect: false,
        refreshWhenHidden: false,
        refreshWhenOffline: false,
        suspense: true,
    });
    react_1.useEffect(() => {
        if (data !== undefined) {
            storage_1.storage.set(data);
        }
    }, [data]);
    const dispatch = react_1.useCallback((action) => __awaiter(void 0, void 0, void 0, function* () {
        let session = null;
        if (action.type === 'create') {
            session = yield controller_1.create();
        }
        if (action.type === 'clear') {
            yield controller_1.clear();
        }
        if (action.type === 'patch') {
            session = yield controller_1.patch(action.data);
        }
        storage_1.storage.set(session);
        mutate(session);
    }), []);
    return [data, dispatch];
};
