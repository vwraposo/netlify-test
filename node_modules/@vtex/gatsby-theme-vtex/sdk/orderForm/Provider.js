"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderFormProvider = exports.OrderForm = void 0;
/**
 * This provider starts fetching early and adds a suspendable reader to
 * the context. Use the hooks to interact with the context
 */
const react_1 = __importStar(require("react"));
const storage_1 = require("./storage");
const controler = () => Promise.resolve().then(() => __importStar(require('./controller')));
exports.OrderForm = react_1.createContext(undefined);
exports.OrderFormProvider = ({ children }) => {
    const [orderForm, setOrderForm] = react_1.useState(() => storage_1.storage.get());
    const id = orderForm === null || orderForm === void 0 ? void 0 : orderForm.id;
    // Fetch orderForm on first render
    react_1.useEffect(() => {
        let cancel = false;
        const callbackId = window.requestIdleCallback(() => {
            controler().then(({ getOrderForm }) => getOrderForm(id, (of) => {
                if (!cancel) {
                    setOrderForm(of);
                }
            }));
        });
        return () => {
            cancel = true;
            window.cancelIdleCallback(callbackId);
        };
    }, [id]);
    // Add item to cart using the queue
    const addToCart = react_1.useCallback((items) => __awaiter(void 0, void 0, void 0, function* () {
        const ctl = yield controler();
        return ctl.addToCart(id, items, setOrderForm);
    }), [id]);
    const updateItems = react_1.useCallback((items, cb = () => null) => __awaiter(void 0, void 0, void 0, function* () {
        const ctl = yield controler();
        ctl.updateItems({
            orderFormId: id,
            items,
            callback: (of) => {
                cb(of);
                setOrderForm(of);
            },
        });
    }), [id]);
    return (react_1.default.createElement(exports.OrderForm.Provider, { value: {
            value: orderForm,
            addToCart,
            updateItems,
        } }, children));
};
