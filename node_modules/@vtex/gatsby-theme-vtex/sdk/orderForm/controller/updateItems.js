"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mutation = exports.updateItems = void 0;
const gatsby_plugin_graphql_1 = require("@vtex/gatsby-plugin-graphql");
const request_1 = require("../../graphql/request");
const orderForm_1 = require("./orderForm");
const UpdateItemsMutation_graphql_1 = require("./__generated__/UpdateItemsMutation.graphql");
exports.updateItems = ({ orderFormId, items, splitItem, callback, }) => __awaiter(void 0, void 0, void 0, function* () {
    return orderForm_1.queue.add(() => __awaiter(void 0, void 0, void 0, function* () {
        const { updateItems: of } = yield request_1.request(Object.assign(Object.assign({}, UpdateItemsMutation_graphql_1.UpdateItemsMutation), { variables: { orderFormId, items, splitItem } }));
        orderForm_1.setOrderFormState(of, callback);
    }));
});
exports.mutation = gatsby_plugin_graphql_1.gql `
  mutation UpdateItemsMutation(
    $orderFormId: ID
    $items: [VTEX_ItemInput]
    $splitItem: Boolean
  ) {
    updateItems(
      orderFormId: $orderFormId
      orderItems: $items
      splitItem: $splitItem
    ) {
      ...OrderFormFragment_orderForm
    }
  }
`;
