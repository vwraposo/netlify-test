import { CB } from './orderForm';
export declare const addToCart: (orderFormId: string, items: Vtex_ItemInput[], cb: CB) => Promise<{
    id: string;
    canEditData: boolean;
    loggedIn: boolean;
    userProfileId: string | null | undefined;
    userType: any;
    value: number;
    allowManualPrice: boolean | null | undefined;
    items: {
        parentAssemblyBinding: string | null | undefined;
        sellingPriceWithAssemblies: number | null | undefined;
        availability: string | null | undefined;
        detailUrl: string | null | undefined;
        id: string;
        listPrice: number | null | undefined;
        manualPrice: number | null | undefined;
        measurementUnit: string | null | undefined;
        name: string | null | undefined;
        price: number | null | undefined;
        productCategories: any;
        productCategoryIds: string | null | undefined;
        productRefId: string | null | undefined;
        productId: string | null | undefined;
        quantity: number;
        seller: string | null | undefined;
        sellingPrice: number | null | undefined;
        skuName: string | null | undefined;
        unitMultiplier: number | null | undefined;
        uniqueId: string;
        refId: string | null | undefined;
        additionalInfo: {
            brandName: string | null | undefined;
        } | null | undefined;
        attachments: {
            name: string | null | undefined;
            content: any;
        }[];
        attachmentOfferings: {
            name: string | null | undefined;
            required: boolean | null | undefined;
            schema: any;
        }[];
        bundleItems: {
            availability: string | null | undefined;
            detailUrl: string | null | undefined;
            id: string;
            listPrice: number | null | undefined;
            measurementUnit: string | null | undefined;
            name: string | null | undefined;
            price: number | null | undefined;
            productCategories: any;
            productCategoryIds: string | null | undefined;
            productRefId: string | null | undefined;
            productId: string | null | undefined;
            quantity: number;
            seller: string | null | undefined;
            sellingPrice: number | null | undefined;
            skuName: string | null | undefined;
            unitMultiplier: number | null | undefined;
            uniqueId: string;
            refId: string | null | undefined;
            additionalInfo: {
                brandName: string | null | undefined;
            } | null | undefined;
            attachments: {
                name: string | null | undefined;
                content: any;
            }[];
            attachmentOfferings: {
                name: string | null | undefined;
                required: boolean | null | undefined;
                schema: any;
            }[];
            imageUrls: {
                at1x: string;
                at2x: string;
                at3x: string;
            } | null | undefined;
            offerings: {
                id: string;
                name: string;
                price: number;
                type: string;
                attachmentOfferings: {
                    name: string | null | undefined;
                    required: boolean | null | undefined;
                    schema: any;
                }[];
            }[];
            skuSpecifications: {
                fieldName: string | null | undefined;
                fieldValues: (string | null | undefined)[];
            }[];
        }[];
        options: ({
            assemblyId: string;
            id: string | null | undefined;
            quantity: number | null | undefined;
            seller: string | null | undefined;
            inputValues: any;
            options: {
                assemblyId: string;
                id: string | null | undefined;
                quantity: number | null | undefined;
                seller: string | null | undefined;
                inputValues: any;
                options: {
                    assemblyId: string;
                    id: string | null | undefined;
                    quantity: number | null | undefined;
                    seller: string | null | undefined;
                    inputValues: any;
                }[] | null | undefined;
            }[] | null | undefined;
        } | null | undefined)[] | null | undefined;
        imageUrls: {
            at1x: string;
            at2x: string;
            at3x: string;
        } | null | undefined;
        offerings: {
            id: string;
            name: string;
            price: number;
            type: string;
            attachmentOfferings: {
                name: string | null | undefined;
                required: boolean | null | undefined;
                schema: any;
            }[];
        }[];
        skuSpecifications: {
            fieldName: string | null | undefined;
            fieldValues: (string | null | undefined)[];
        }[];
    }[];
    marketingData: {
        coupon: string | null | undefined;
        utmCampaign: string | null | undefined;
        utmMedium: string | null | undefined;
        utmSource: string | null | undefined;
        utmiCampaign: string | null | undefined;
        utmiPart: string | null | undefined;
        utmiPage: string | null | undefined;
    };
    totalizers: ({
        id: string;
        name: string | null | undefined;
        value: number;
    } | null | undefined)[];
    shipping: {
        countries: (string | null | undefined)[] | null | undefined;
        isValid: boolean;
        availableAddresses: ({
            addressId: string | null | undefined;
            addressType: any;
            city: string | null | undefined;
            complement: string | null | undefined;
            country: string | null | undefined;
            neighborhood: string | null | undefined;
            number: string | null | undefined;
            postalCode: string | null | undefined;
            receiverName: string | null | undefined;
            reference: string | null | undefined;
            state: string | null | undefined;
            street: string | null | undefined;
            isDisposable: boolean | null | undefined;
        } | null | undefined)[] | null | undefined;
        selectedAddress: {
            addressId: string | null | undefined;
            addressType: any;
            city: string | null | undefined;
            complement: string | null | undefined;
            country: string | null | undefined;
            neighborhood: string | null | undefined;
            number: string | null | undefined;
            postalCode: string | null | undefined;
            receiverName: string | null | undefined;
            reference: string | null | undefined;
            state: string | null | undefined;
            street: string | null | undefined;
            isDisposable: boolean | null | undefined;
        } | null | undefined;
        deliveryOptions: {
            id: string;
            price: number;
            estimate: string;
            isSelected: boolean;
        }[];
    };
    paymentData: {
        isValid: boolean;
        paymentSystems: {
            id: string;
            name: string;
            groupName: string;
            stringId: string;
            requiresDocument: boolean;
            isCustom: boolean;
            description: string | null | undefined;
            requiresAuthentication: boolean | null | undefined;
            dueDate: string | null | undefined;
            validator: {
                regex: string | null | undefined;
                mask: string | null | undefined;
                cardCodeRegex: string | null | undefined;
                cardCodeMask: string | null | undefined;
                weights: (number | null | undefined)[] | null | undefined;
                useCvv: boolean | null | undefined;
                useExpirationDate: boolean | null | undefined;
                useCardHolderName: boolean | null | undefined;
                useBillingAddress: boolean | null | undefined;
            } | null | undefined;
        }[];
        payments: {
            paymentSystem: string | null | undefined;
            bin: string | null | undefined;
            accountId: string | null | undefined;
            tokenId: string | null | undefined;
            installments: number | null | undefined;
            referenceValue: number | null | undefined;
            value: number | null | undefined;
        }[];
        installmentOptions: {
            paymentSystem: string;
            installments: {
                count: number;
                hasInterestRate: boolean | null | undefined;
                interestRate: number | null | undefined;
                value: number | null | undefined;
                total: number;
            }[];
        }[];
        availableAccounts: {
            accountId: string;
            paymentSystem: string;
            paymentSystemName: string;
            cardNumber: string;
            bin: string;
        }[];
    };
    clientProfileData: {
        email: string | null | undefined;
        firstName: string | null | undefined;
        lastName: string | null | undefined;
        document: string | null | undefined;
        documentType: string | null | undefined;
        phone: string | null | undefined;
        isValid: boolean;
    } | null | undefined;
    clientPreferencesData: {
        locale: string | null | undefined;
        optInNewsletter: boolean | null | undefined;
    } | null | undefined;
    messages: {
        couponMessages: ({
            code: string | null | undefined;
        } | null | undefined)[];
        generalMessages: ({
            code: string | null | undefined;
            text: string | null | undefined;
            status: string | null | undefined;
        } | null | undefined)[];
    };
}>;
export declare const mutation: never;
