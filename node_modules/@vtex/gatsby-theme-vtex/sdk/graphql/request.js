"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = void 0;
const gatsby_plugin_graphql_1 = require("@vtex/gatsby-plugin-graphql");
exports.request = (options) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const { data, errors } = yield gatsby_plugin_graphql_1.request('/graphql/', Object.assign(Object.assign({}, options), { fetchOptions: Object.assign(Object.assign({ credentials: 'omit' }, options.fetchOptions), { headers: Object.assign({ 'x-vtex-graphql-referer': window.location.host }, (_a = options.fetchOptions) === null || _a === void 0 ? void 0 : _a.headers) }) }));
    if (errors === null || errors === void 0 ? void 0 : errors.length) {
        throw errors[0];
    }
    return data;
});
