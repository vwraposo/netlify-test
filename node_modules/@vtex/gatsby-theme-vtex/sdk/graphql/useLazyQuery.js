"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useLazyQuery = void 0;
const swr_1 = __importDefault(require("swr"));
const request_1 = require("./request");
// TODO: Change here
const getKey = (options) => `${options.sha256Hash}::${JSON.stringify(options.variables)}`;
exports.useLazyQuery = (options) => {
    const response = swr_1.default(getKey(options), () => null, {
        revalidateOnFocus: false,
    });
    const execute = (variables) => __awaiter(void 0, void 0, void 0, function* () {
        const data = yield request_1.request(Object.assign(Object.assign({}, options), { variables }));
        response.mutate(data, false);
    });
    return [execute, response];
};
