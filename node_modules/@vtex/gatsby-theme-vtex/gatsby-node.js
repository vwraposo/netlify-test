"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onCreateWebpackConfig = exports.createPages = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const root = process.cwd();
const tenant = process.env.GATSBY_VTEX_TENANT;
const environment = process.env.GATSBY_VTEX_ENVIRONMENT;
const workspace = process.env.GATSBY_VTEX_IO_WORKSPACE;
const getRoute = (path) => {
    const splitted = path.split('/');
    if (path === '/') {
        return null;
    }
    if (splitted.length === 3 && path.endsWith('/p')) {
        return 'product';
    }
    if (splitted.length >= 2) {
        return 'search';
    }
    throw new Error(`Unroutable route: ${path}`);
};
exports.createPages = ({ actions: { createPage, createRedirect }, graphql }, { getStaticPaths }) => __awaiter(void 0, void 0, void 0, function* () {
    createRedirect({
        fromPath: '/api/io/*',
        toPath: `https://${workspace}--${tenant}.myvtex.com/:splat`,
        statusCode: 200,
        headers: {
            // VTEX ID needs the forwarded host in order to set the cookie correctly
            'x-forwarded-host': '$host',
        },
    });
    createRedirect({
        fromPath: '/api/*',
        toPath: `https://${tenant}.${environment}.com.br/api/:splat`,
        statusCode: 200,
        headers: {
            // VTEX ID needs the forwarded host in order to set the cookie correctly
            'x-forwarded-host': '$host',
        },
    });
    createRedirect({
        fromPath: '/checkout/*',
        toPath: `https://${tenant}.${environment}.com.br/checkout/:splat`,
        statusCode: 200,
    });
    createRedirect({
        fromPath: '/arquivos/*',
        toPath: `https://${tenant}.vtexassets.com/arquivos/:splat`,
        statusCode: 200,
    });
    createRedirect({
        fromPath: '/files/*',
        toPath: `https://${tenant}.vtexassets.com/files/:splat`,
        statusCode: 200,
    });
    createRedirect({
        fromPath: '/graphql/*',
        toPath: `https://${workspace}--${tenant}.myvtex.com/graphql/:splat`,
        statusCode: 200,
    });
    /**
     * STATIC PATHS
     */
    const staticPaths = typeof getStaticPaths === 'function' ? yield getStaticPaths() : [];
    staticPaths.map((path) => __awaiter(void 0, void 0, void 0, function* () {
        const route = getRoute(path);
        const splitted = path.split('/');
        // Product Pages
        if (route === 'product') {
            const [, slug] = splitted;
            createPage({
                path,
                component: path_1.resolve(__dirname, './src/templates/product.tsx'),
                context: {
                    slug,
                    staticPath: true,
                },
            });
        }
        // Search Pages
        else if (route === 'search') {
            const segments = splitted.filter((segment) => !!segment);
            createPage({
                path,
                component: path_1.resolve(__dirname, './src/templates/search.tsx'),
                context: {
                    query: segments.join('/'),
                    map: new Array(segments.length).fill('c').join(','),
                    selectedFacets: segments.map((segment) => ({
                        key: 'c',
                        value: segment,
                    })),
                    staticPath: true,
                },
            });
        }
    }));
    /**
     * CLIENT ONLY PATHS
     */
    // Client-side rendered product pages
    createPage({
        path: '/__client-side-product__/p',
        matchPath: '/:slug/p',
        component: path_1.resolve(__dirname, './src/templates/product.tsx'),
        context: {
            staticPath: false,
        },
    });
    createPage({
        path: '/__client-side-search__',
        matchPath: '/*',
        component: path_1.resolve(__dirname, './src/templates/search.tsx'),
        context: {
            staticPath: false,
        },
    });
    /**
     * CMS PAGES
     */
    const { data: cmsPageData, errors: cmsPageError } = yield graphql(`
    query {
      allCmsPage {
        nodes {
          name
          slug
          src
        }
      }
    }
  `);
    if (cmsPageError) {
        console.error(cmsPageError);
        return;
    }
    const { allCmsPage } = cmsPageData;
    // ensure dist folder
    const cmsRoot = path_1.join(root, '.cache/vtex-cms');
    yield fs_extra_1.ensureDir(cmsRoot);
    // Create page .tsx files as well as gatsby's node pages
    const cmsPages = allCmsPage.nodes.map((page) => __awaiter(void 0, void 0, void 0, function* () {
        const { src, slug, name } = page;
        const filepath = path_1.join(cmsRoot, `${name}.tsx`);
        yield fs_extra_1.outputFile(filepath, src);
        createPage({
            path: slug,
            component: filepath,
            context: {},
        });
    }));
    yield Promise.all(cmsPages);
});
exports.onCreateWebpackConfig = ({ actions: { setWebpackConfig }, }) => {
    setWebpackConfig({
        module: {
            rules: [
                {
                    test: /\.md$/,
                    use: [
                        { loader: require.resolve('html-loader') },
                        { loader: require.resolve('markdown-loader') },
                    ],
                },
            ],
        },
    });
};
