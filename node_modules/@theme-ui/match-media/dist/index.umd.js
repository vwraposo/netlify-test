(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('theme-ui')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'theme-ui'], factory) :
  (factory((global.matchMedia = {}),global.react,global.themeUi));
}(this, (function (exports,react,themeUi) {
  var defaultBreakpoints = [40, 52, 64].map(function (n) { return n + 'em'; });
  var useBreakpointIndex = function (options) {
    if ( options === void 0 ) options = {};

    var context = themeUi.useThemeUI();
    var defaultIndex = options.defaultIndex; if ( defaultIndex === void 0 ) defaultIndex = 0;
    var breakpoints = context.theme && context.theme.breakpoints || defaultBreakpoints;
    var getIndex = react.useCallback(function () {
      if (typeof window === 'undefined') {
        if (typeof defaultIndex === 'number') {
          if (defaultIndex < 0 || defaultIndex > breakpoints.length - 1) {
            throw new RangeError(("Default breakpoint index out of range. Theme has " + (breakpoints.length) + " breakpoints, got index " + defaultIndex));
          }

          return defaultIndex;
        }

        throw new TypeError(("Default breakpoint index should be a number. Got: " + defaultIndex + ", " + (typeof defaultIndex)));
      }

      return breakpoints.filter(function (breakpoint) { return window.matchMedia(("screen and (min-width: " + breakpoint + ")")).matches; }).length;
    }, [breakpoints, defaultIndex]);
    var ref = react.useState(getIndex);
    var value = ref[0];
    var setValue = ref[1];
    react.useEffect(function () {
      var onResize = function () {
        var newValue = getIndex();

        if (value !== newValue) {
          setValue(newValue);
        }
      };

      window.addEventListener('resize', onResize);
      return function () { return window.removeEventListener('resize', onResize); };
    }, [breakpoints, getIndex, value]);
    return value;
  };
  var useResponsiveValue = function (values, options) {
    var ref = themeUi.useThemeUI();
    var theme = ref.theme;
    var array = typeof values === 'function' ? values(theme) : values;
    var index = useBreakpointIndex(options);
    return array[index >= array.length ? array.length - 1 : index];
  };

  exports.useBreakpointIndex = useBreakpointIndex;
  exports.useResponsiveValue = useResponsiveValue;

})));
//# sourceMappingURL=index.umd.js.map
