import { useState, useEffect, useCallback } from 'react';
import { useThemeUI } from 'theme-ui';

var defaultBreakpoints = [40, 52, 64].map(function (n) { return n + 'em'; });
var useBreakpointIndex = function (options) {
  if ( options === void 0 ) options = {};

  var context = useThemeUI();
  var defaultIndex = options.defaultIndex; if ( defaultIndex === void 0 ) defaultIndex = 0;
  var breakpoints = context.theme && context.theme.breakpoints || defaultBreakpoints;
  var getIndex = useCallback(function () {
    if (typeof window === 'undefined') {
      if (typeof defaultIndex === 'number') {
        if (defaultIndex < 0 || defaultIndex > breakpoints.length - 1) {
          throw new RangeError(("Default breakpoint index out of range. Theme has " + (breakpoints.length) + " breakpoints, got index " + defaultIndex));
        }

        return defaultIndex;
      }

      throw new TypeError(("Default breakpoint index should be a number. Got: " + defaultIndex + ", " + (typeof defaultIndex)));
    }

    return breakpoints.filter(function (breakpoint) { return window.matchMedia(("screen and (min-width: " + breakpoint + ")")).matches; }).length;
  }, [breakpoints, defaultIndex]);
  var ref = useState(getIndex);
  var value = ref[0];
  var setValue = ref[1];
  useEffect(function () {
    var onResize = function () {
      var newValue = getIndex();

      if (value !== newValue) {
        setValue(newValue);
      }
    };

    window.addEventListener('resize', onResize);
    return function () { return window.removeEventListener('resize', onResize); };
  }, [breakpoints, getIndex, value]);
  return value;
};
var useResponsiveValue = function (values, options) {
  var ref = useThemeUI();
  var theme = ref.theme;
  var array = typeof values === 'function' ? values(theme) : values;
  var index = useBreakpointIndex(options);
  return array[index >= array.length ? array.length - 1 : index];
};

export { useBreakpointIndex, useResponsiveValue };
//# sourceMappingURL=index.esm.js.map
