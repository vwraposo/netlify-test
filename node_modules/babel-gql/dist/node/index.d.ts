import { ParsedGQLTag } from "./shared";
export { ParsedGQLTag };
interface TagListener {
    (tag: ParsedGQLTag): any;
}
export declare function createRuntimeGQL(): {
    gql: (literals: TemplateStringsArray, ...placeholders: string[]) => ParsedGQLTag;
    runtimeGQL: (parsed: ParsedGQLTag) => ParsedGQLTag;
    registerGQLListener: (fn: TagListener) => void;
    getQueries(): Record<string, {
        query: string;
        queryName: string;
        queryId: string;
        usedFragments: string[];
    } | undefined>;
    getFragments(): Record<string, {
        fragment: string;
        fragmentName: string;
        fragmentId: string;
        usedFragments: string[];
    } | undefined>;
    getQuery(queryName: string): {
        query: string;
        queryName: string;
        queryId: string;
    };
};
export declare function request<ResponseType = any>(endpoint: string, options: {
    query: string | ParsedGQLTag;
    variables?: object;
    fetch?: typeof fetch;
    fetchOptions?: RequestInit;
}): Promise<{
    response: Response;
    errors?: any[];
    data: ResponseType;
}>;
export declare const gql: (literals: TemplateStringsArray, ...placeholders: string[]) => ParsedGQLTag;
export declare const getQuery: (queryName: string) => {
    query: string;
    queryName: string;
    queryId: string;
};
export declare const registerGQLListener: (fn: TagListener) => void;
export declare const getQueries: () => Record<string, {
    query: string;
    queryName: string;
    queryId: string;
    usedFragments: string[];
} | undefined>;
export declare const getFragments: () => Record<string, {
    fragment: string;
    fragmentName: string;
    fragmentId: string;
    usedFragments: string[];
} | undefined>;
