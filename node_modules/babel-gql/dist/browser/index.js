"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFragments = exports.getQueries = exports.registerGQLListener = exports.getQuery = exports.gql = exports.request = exports.createRuntimeGQL = void 0;
var shared_1 = require("./shared");
function createRuntimeGQL() {
    var queries = {};
    var fragments = {};
    var listeners = [];
    function registerGQLListener(fn) {
        listeners.push(fn);
    }
    function gql(literals) {
        var placeholders = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            placeholders[_i - 1] = arguments[_i];
        }
        if (!Array.isArray(literals)) {
            // Was converted to a normal function call via babel
            return runtimeGQL(literals);
        }
        throw new Error("babel-gql not configured?");
    }
    function runtimeGQL(parsed) {
        listeners.forEach(function (fn) { return fn(parsed); });
        parsed.queries.forEach(function (query) {
            queries[query.queryName] = query;
        });
        parsed.fragments.forEach(function (fragment) {
            fragments[fragment.fragmentName] = fragment;
        });
        return parsed;
    }
    function findFragmentsOfFragments(fragmentName, _frags) {
        var fragment = fragments[fragmentName];
        if (!fragment) {
            throw new Error("Cannot find fragment " + fragmentName);
        }
        if (!_frags) {
            _frags = {};
        }
        _frags[fragmentName] = true;
        fragment.usedFragments.forEach(function (fragmenName) {
            _frags[fragmenName] = true;
            findFragmentsOfFragments(fragmenName, _frags);
        });
        return _frags;
    }
    return {
        gql: gql,
        runtimeGQL: runtimeGQL,
        registerGQLListener: registerGQLListener,
        getQueries: function () {
            return queries;
        },
        getFragments: function () {
            return fragments;
        },
        getQuery: function (queryName) {
            var query = queries[queryName];
            if (!query) {
                throw new Error("Cannot find query " + queryName);
            }
            var frags = {};
            query.usedFragments.forEach(function (fragmentName) {
                findFragmentsOfFragments(fragmentName, frags);
            });
            var usedFragments = Object.keys(frags).map(function (fragmentName) {
                var fragment = fragments[fragmentName];
                if (!fragment) {
                    throw new Error("Cannot find fragment " + fragmentName + " for query " + queryName);
                }
                return fragment;
            });
            return {
                query: (usedFragments.map(function (f) { return f.fragment; }).join("\n") +
                    "\n" +
                    query.query).trim(),
                queryName: queryName,
                queryId: shared_1.combinedIds(__spread([
                    query.queryId
                ], usedFragments.map(function (f) { return f.fragmentId; }))),
            };
        },
    };
}
exports.createRuntimeGQL = createRuntimeGQL;
function doRequest(endpoint, options) {
    var _a, _b, _c;
    var ourFetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : fetch;
    if (process.env.NODE_ENV !== "production") {
        var _d = (_b = options.fetchOptions) !== null && _b !== void 0 ? _b : {}, headers = _d.headers, otherOptions = __rest(_d, ["headers"]);
        return ourFetch(endpoint, __assign(__assign({ method: "POST", headers: __assign({ "content-type": "application/json" }, (_c = options.fetchOptions) === null || _c === void 0 ? void 0 : _c.headers) }, otherOptions), { body: JSON.stringify({
                variables: options.variables,
                operationName: options.query.queryName,
                query: options.query.query,
            }) }));
    }
    var params = new URLSearchParams();
    params.append("operationName", options.query.queryName);
    if (options.variables) {
        params.append("variables", JSON.stringify(options.variables));
    }
    params.append("extensions", JSON.stringify({
        persistedQuery: {
            version: 1,
            sha256Hash: options.query.queryId,
        },
    }));
    // XXX turn to POST if mutation
    return ourFetch(endpoint + "?" + params.toString(), options.fetchOptions);
}
function request(endpoint, options) {
    var query = options.query;
    if (typeof query !== "string") {
        if (query.queries.length === 0) {
            throw new Error("Cannot find graphql query from tag");
        }
        if (query.queries.length > 1) {
            console.warn("Multiple queries defined in request query " +
                query.queries.map(function (q) { return q.queryName; }).join(", "));
        }
    }
    var promise;
    if (typeof query === "string") {
        promise = doRequest(endpoint, {
            query: exports.getQuery(query),
            variables: options.variables,
            fetch: options.fetch,
            fetchOptions: options.fetchOptions,
        });
    }
    else {
        var queryOb = query.queries[0];
        promise = doRequest(endpoint, {
            query: exports.getQuery(queryOb.queryName),
            variables: options.variables,
            fetch: options.fetch,
            fetchOptions: options.fetchOptions,
        });
    }
    var response;
    return promise
        .then(function (res) {
        response = res;
        return res.json();
    })
        .then(function (data) {
        var _a, _b;
        if ((_b = (_a = data.errors) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0 > 0) {
            data.errors.forEach(function (error) {
                console.error("GraphQL response error:", error.message, error);
            });
        }
        data.response = response;
        return data;
    });
}
exports.request = request;
var babelqgl = createRuntimeGQL();
exports.gql = babelqgl.gql;
exports.getQuery = babelqgl.getQuery;
exports.registerGQLListener = babelqgl.registerGQLListener;
exports.getQueries = babelqgl.getQueries;
exports.getFragments = babelqgl.getFragments;
//# sourceMappingURL=index.js.map