import React, { useState, Children, useCallback, useEffect } from 'react';
import { Box, Flex } from 'theme-ui';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var assertSingleOpen = function assertSingleOpen() {
  var isActive = false;
  return function (child) {
    if (isActive && child.props.isActive) {
      throw new Error('Cannot use multiple active Sections in singleOpen mode. Maybe try using multiOpen mode or passing isActive to a single section ?');
    }

    if (child.props.isActive) {
      isActive = true;
    }
  };
};

function Collapsible(_ref) {
  var id = _ref.id,
      header = _ref.header,
      children = _ref.children,
      _ref$isActive = _ref.isActive,
      isActive = _ref$isActive === void 0 ? false : _ref$isActive,
      onClick = _ref.onClick,
      renderIcon = _ref.renderIcon,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'vtex-components' : _ref$variant;

  var handleOnClick = function handleOnClick() {
    onClick === null || onClick === void 0 ? void 0 : onClick(id !== null && id !== void 0 ? id : '');
  };

  var customVariant = variant + ".collapsible";
  var icon = renderIcon === null || renderIcon === void 0 ? void 0 : renderIcon(isActive);
  return React.createElement(Box, {
    variant: customVariant
  }, React.createElement(Flex, {
    variant: customVariant + ".header",
    onClick: handleOnClick
  }, header, icon), isActive && children);
}

function Accordion(_ref) {
  var children = _ref.children,
      renderIcon = _ref.renderIcon,
      _ref$mode = _ref.mode,
      mode = _ref$mode === void 0 ? 'singleOpen' : _ref$mode,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'vtex-components' : _ref$variant;

  var _useState = useState(function () {
    return Children.map(children, function (child) {
      return !!child.props.isActive;
    });
  }),
      activeKeys = _useState[0],
      setActiveKeys = _useState[1];

  var customVariant = variant + ".accordion";
  var toggleSection = useCallback(function (key) {
    setActiveKeys(function (keys) {
      return keys.map(function (state, index) {
        if (index === key) {
          return !state;
        }

        return mode === 'singleOpen' ? false : state;
      });
    });
  }, [mode]);
  useEffect(function () {
    var keys = Children.map(children, function (child) {
      return !!child.props.isActive;
    });
    setActiveKeys(keys);
  }, [children]);
  useEffect(function () {
    if (mode === 'singleOpen') {
      Children.forEach(children, assertSingleOpen());
    }
  }, [children, mode]);

  var onClickSection = function onClickSection(key, callback) {
    toggleSection(key);
    callback === null || callback === void 0 ? void 0 : callback(key);
  };

  var createSection = function createSection(child, key) {
    var _child$props$renderIc, _child$props$variant;

    var props = _extends({}, child.props, {
      isActive: activeKeys[key],
      onClick: function onClick() {
        return onClickSection(key, child.props.onClick);
      },
      renderIcon: (_child$props$renderIc = child.props.renderIcon) !== null && _child$props$renderIc !== void 0 ? _child$props$renderIc : renderIcon,
      variant: (_child$props$variant = child.props.variant) !== null && _child$props$variant !== void 0 ? _child$props$variant : customVariant
    });

    return React.cloneElement(child, props);
  };

  var sections = Children.map(children, createSection);
  return React.createElement(Box, {
    variant: customVariant
  }, sections);
}

Accordion.Section = Collapsible;

export default Accordion;
//# sourceMappingURL=accordion.esm.js.map
