'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var ReactDOM = _interopDefault(require('react-dom'));
var themeUi = require('theme-ui');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var placementValue = function placementValue(placement) {
  var values = {};

  switch (placement) {
    case 'top':
      values = {
        top: 0,
        left: 0,
        right: 0
      };
      break;

    case 'bottom':
      values = {
        bottom: 0,
        left: 0,
        right: 0
      };
      break;

    case 'right':
      values = {
        top: 0,
        bottom: 0,
        right: 0
      };
      break;

    default:
      values = {
        top: 0,
        bottom: 0,
        left: 0
      };
      break;
  }

  return values;
};

var Drawer = function Drawer(_ref) {
  var variant = _ref.variant,
      _ref$isOpen = _ref.isOpen,
      isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'left' : _ref$placement,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 300 : _ref$width,
      children = _ref.children,
      onClose = _ref.onClose;
  React.useEffect(function () {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    }

    return function () {
      document.body.style.overflow = '';
    };
  }, [isOpen]);
  var customVariant = variant ? variant + ".drawer" : 'drawer';

  if (!isOpen) {
    return null;
  }

  var widthValue = placement === 'left' || placement === 'right' ? {
    maxWidth: width,
    width: '100%'
  } : {
    maxHeight: width,
    height: '100%'
  };
  return ReactDOM.createPortal(React__default.createElement(themeUi.Box, {
    variant: customVariant
  }, React__default.createElement(themeUi.Box, {
    variant: customVariant + ".container",
    sx: _extends({
      position: 'fixed'
    }, widthValue, placementValue(placement))
  }, children), React__default.createElement(themeUi.Box, {
    variant: customVariant + ".mask",
    onClick: onClose,
    sx: {
      position: 'fixed',
      top: 0,
      left: 0,
      bottom: 0,
      right: 0
    }
  })), document.body);
};

exports.default = Drawer;
//# sourceMappingURL=drawer.cjs.development.js.map
