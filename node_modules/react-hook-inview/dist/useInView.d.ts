/// <reference types="react" />
interface State {
    inView: boolean;
    entry: IntersectionObserverEntry | null;
    observer: IntersectionObserver | null;
}
declare type onIntersect = (entry: IntersectionObserverEntry, observer: IntersectionObserver) => void;
interface Options extends IntersectionObserverInit {
    unobserveOnEnter?: boolean;
    target?: React.RefObject<Element | null>;
    onEnter?: onIntersect;
    onLeave?: onIntersect;
}
interface UseInView {
    (options?: Options, externalState?: React.ComponentState[]): [
        React.Dispatch<React.SetStateAction<Element | null>>,
        State['inView'],
        State['entry'],
        State['observer']
    ];
}
/**
 * useInView
 * @param options IntersectionObserverInit
 * @param externalState React.ComponentState[]
 */
declare const useInView: UseInView;
export default useInView;
