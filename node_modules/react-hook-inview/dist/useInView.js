"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var useObserver_1 = __importDefault(require("./useObserver"));
/**
 * useInView
 * @param options IntersectionObserverInit
 * @param externalState React.ComponentState[]
 */
var useInView = function (options, externalState) {
    if (options === void 0) { options = {}; }
    if (externalState === void 0) { externalState = []; }
    var _a = react_1.useState({
        inView: false,
        entry: null,
        observer: null,
    }), state = _a[0], setState = _a[1];
    var callback = react_1.useCallback(function (_a, observer) {
        var entry = _a[0];
        if (!entry || !observer)
            return;
        var onEnter = options.onEnter, onLeave = options.onLeave, unobserveOnEnter = options.unobserveOnEnter;
        var isIntersecting = entry.isIntersecting, intersectionRatio = entry.intersectionRatio;
        var thresholds = observer.thresholds;
        if (intersectionRatio >= 0) {
            var inThreshold = thresholds.some(function (t) { return intersectionRatio >= t; });
            var inView = inThreshold && isIntersecting;
            setState({
                inView: inView,
                entry: entry,
                observer: observer,
            });
            // unobserveOnEnter
            if (inView && unobserveOnEnter)
                observer.disconnect();
            // Legacy callbacks
            if (inView) {
                onEnter && onEnter(entry, observer);
            }
            else {
                onLeave && onLeave(entry, observer);
            }
        }
    }, [options]);
    var _b = options.root, root = _b === void 0 ? null : _b, _c = options.rootMargin, rootMargin = _c === void 0 ? '0px 0px 0px 0px' : _c, _d = options.threshold, threshold = _d === void 0 ? 0 : _d;
    var setTarget = useObserver_1.default(callback, { root: root, rootMargin: rootMargin, threshold: threshold }, externalState);
    // Legacy 'target' option
    var target = options.target;
    react_1.useEffect(function () {
        if (target === null || target === void 0 ? void 0 : target.current)
            setTarget(target.current);
    }, [target, setTarget]);
    return [setTarget, state.inView, state.entry, state.observer];
};
exports.default = useInView;
