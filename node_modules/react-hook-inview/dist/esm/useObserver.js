import { useRef, useCallback, } from 'react';
/**
 * useObserver
 * @param callback IntersectionObserverCallback
 * @param options IntersectionObserverInit
 * @param externalState React.ComponentState[]
 */
const useObserver = (callback, options = {}, externalState = []) => {
    const target = useRef(null);
    const observer = useRef(null);
    const setTarget = useCallback(node => {
        var _a;
        const { root = null, rootMargin = '0px 0px 0px 0px', threshold = 0, } = options;
        if (target.current)
            (_a = observer.current) === null || _a === void 0 ? void 0 : _a.unobserve(target.current);
        if (!node)
            return;
        observer.current = new IntersectionObserver(callback, { root, rootMargin, threshold });
        observer.current.observe(node);
        target.current = node;
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [target, ...externalState]);
    return setTarget;
};
export default useObserver;
