import { useEffect, useState, useCallback, } from 'react';
import useObserver from './useObserver';
/**
 * useInView
 * @param options IntersectionObserverInit
 * @param externalState React.ComponentState[]
 */
const useInView = (options = {}, externalState = []) => {
    const [state, setState] = useState({
        inView: false,
        entry: null,
        observer: null,
    });
    const callback = useCallback(([entry], observer) => {
        if (!entry || !observer)
            return;
        const { onEnter, onLeave, unobserveOnEnter, } = options;
        const { isIntersecting, intersectionRatio } = entry;
        const { thresholds } = observer;
        if (intersectionRatio >= 0) {
            const inThreshold = thresholds.some(t => intersectionRatio >= t);
            const inView = inThreshold && isIntersecting;
            setState({
                inView,
                entry,
                observer,
            });
            // unobserveOnEnter
            if (inView && unobserveOnEnter)
                observer.disconnect();
            // Legacy callbacks
            if (inView) {
                onEnter && onEnter(entry, observer);
            }
            else {
                onLeave && onLeave(entry, observer);
            }
        }
    }, [options]);
    const { root = null, rootMargin = '0px 0px 0px 0px', threshold = 0, } = options;
    const setTarget = useObserver(callback, { root, rootMargin, threshold }, externalState);
    // Legacy 'target' option
    const { target } = options;
    useEffect(() => {
        if (target === null || target === void 0 ? void 0 : target.current)
            setTarget(target.current);
    }, [target, setTarget]);
    return [setTarget, state.inView, state.entry, state.observer];
};
export default useInView;
